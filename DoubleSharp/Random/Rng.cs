namespace DoubleSharp.Random;

/// <summary>
/// Provides access to pseudo-random number generators on a thread-local basis, with a different seed value per thread.
/// </summary>
/// <remarks>
/// The numbers generated by this class are not suitable for cryptographic purposes; consider using <see cref="System.Security.Cryptography.RandomNumberGenerator"/> if you require a cryptographically secure psuedo-random number generator.
/// </remarks>
public static class Rng {

	/// <summary>An internal counter that is atomically incremented upon each newly created <see cref="System.Random"/> instance.</summary>
	static int SeedSalt;

    /// <summary>An internal factory for creating thread-local <see cref="System.Random"/> instances.</summary>
    /// <remarks>The seed passed to the <see cref="System.Random"/> constructor is derived from the current time and an atomically incrementing salt value.</remarks>
    static readonly ThreadLocal<System.Random> LocalRandom =
		new(() => new(unchecked(Environment.TickCount * Interlocked.Increment(ref SeedSalt))));

    /// <summary>Gets the <see cref="System.Random"/> instance for the current thread.</summary>
    static System.Random Random => LocalRandom.Value!;

	/// <summary>
	/// Returns a non-negative random integer from the thread-local random number generator.
	/// </summary>
	/// <returns>A 32-bit signed integer that is greater than or equal to 0 and less than <see cref="Int32.MaxValue"/>.</returns>
	public static int Next() => Random.Next();

    /// <summary>
    /// Returns a non-negative random integer that is less than the specified maximum, from the thread-local random number generator.
    /// </summary>
    /// <param name="maxValue">The exclusive upper bound of the random number to be generated. <paramref name="maxValue"/> must be greater than or equal to 0.</param>
    /// <returns>
	/// A 32-bit signed integer that is greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, the range of return values ordinarily
    /// includes 0 but not <paramref name="maxValue"/>. However, if <paramref name="maxValue"/> equals 0, <paramref name="maxValue"/> is returned.
	/// </returns>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="maxValue"/> is less than 0.</exception>
    public static int Next(int maxValue) => Random.Next(maxValue);

    /// <summary>Returns a random integer that is within a specified range, from the thread-local random number generator.</summary>
    /// <param name="minValue">The inclusive lower bound of the random number returned.</param>
    /// <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
    /// <returns>
    /// A 32-bit signed integer greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/>
    /// but not <paramref name="maxValue"/>. If minValue equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.
    /// </returns>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="minValue"/> is greater than <paramref name="maxValue"/>.</exception>
    public static int Next(int minValue, int maxValue) => Random.Next(minValue, maxValue);

    /// <summary>Returns a non-negative random integer from the thread-local random number generator.</summary>
    /// <returns>A 64-bit signed integer that is greater than or equal to 0 and less than <see cref="long.MaxValue"/>.</returns>
    public static long NextInt64() => Random.NextInt64();

    /// <summary>Returns a non-negative random integer that is less than the specified maximum, from the thread-local random number generator.</summary>
    /// <param name="maxValue">The exclusive upper bound of the random number to be generated. <paramref name="maxValue"/> must be greater than or equal to 0.</param>
    /// <returns>
    /// A 64-bit signed integer that is greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, the range of return values ordinarily
    /// includes 0 but not <paramref name="maxValue"/>. However, if <paramref name="maxValue"/> equals 0, <paramref name="maxValue"/> is returned.
    /// </returns>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="maxValue"/> is less than 0.</exception>
    public static long NextInt64(int maxValue) => Random.NextInt64(maxValue);

    /// <summary>Returns a random integer that is within a specified range, from the thread-local random number generator.</summary>
    /// <param name="minValue">The inclusive lower bound of the random number returned.</param>
    /// <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
    /// <returns>
    /// A 64-bit signed integer greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/>
    /// but not <paramref name="maxValue"/>. If minValue equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.
    /// </returns>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="minValue"/> is greater than <paramref name="maxValue"/>.</exception>
    public static long NextInt64(int minValue, int maxValue) => Random.NextInt64(minValue, maxValue);

    /// <summary>Fills the elements of a specified array of bytes with random numbers, using the thread-local random number generator.</summary>
    /// <param name="buffer">The array to be filled with random numbers.</param>
    /// <exception cref="ArgumentNullException"><paramref name="buffer"/> is null.</exception>
    public static void NextBytes(byte[] buffer) => Random.NextBytes(buffer);

    /// <summary>Fills the elements of a specified span of bytes with random numbers, using the thread-local random number generator.</summary>
    /// <param name="buffer">The array to be filled with random numbers.</param>
    /// <remarks>If <paramref name="buffer"/> is null, this function does nothing.</remarks>
    public static void NextBytes(Span<byte> buffer) => Random.NextBytes(buffer);

    /// <summary>Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0, from the thread-local random number generator.</summary>
    /// <returns>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
    public static double NextDouble() => Random.NextDouble();

    /// <summary>Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0, from the thread-local random number generator.</summary>
    /// <returns>A single-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
    public static double NextSingle() => Random.NextSingle();
}