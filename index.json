{
  "api/DoubleSharp.Buffers.BufferExtensions.html": {
    "href": "api/DoubleSharp.Buffers.BufferExtensions.html",
    "title": "Class BufferExtensions | DoubleSharp",
    "keywords": "Class BufferExtensions DoubleSharp Buffer extensions. Inheritance Object BufferExtensions Namespace : DoubleSharp.Buffers Assembly : DoubleSharp.dll Syntax public static class BufferExtensions : Object Methods AsEnumerable<T>(Memory<T>) Makes an IEnumerable from a given Memory. Declaration public static IEnumerable<T> AsEnumerable<T>(this Memory<T> memory) Parameters Type Name Description Memory <T> memory The input Memory. Returns Type Description IEnumerable <T> An IEnumerable for memory . Type Parameters Name Description T The type of Memory. AsEnumerable<T>(Span<T>) WARNING: This method is a footgun. If the Span disappears or moves during enumeration, BAD THINGS will happen. Makes an IEnumerable from a given Span. Declaration public static IEnumerable<T> AsEnumerable<T>(this Span<T> span) where T : struct, Parameters Type Name Description Span <T> span The input Span. Returns Type Description IEnumerable <T> An IEnumerable for span . Type Parameters Name Description T The type of Span. Cast<TFrom, TTo>(ref Memory<TFrom>) Casts a Memory from one type to another. Declaration public static Memory<TTo> Cast<TFrom, TTo>(this ref Memory<TFrom> from) where TFrom : struct, where TTo : struct, Parameters Type Name Description Memory <TFrom> from The Memory to cast. Returns Type Description Memory <TTo> The converted Memory. Type Parameters Name Description TFrom The original Memory type. TTo The destination Memory type. Cast<TFrom, TTo>(ReadOnlySpan<TFrom>) Casts a ReadOnlySpan from one type to another. Declaration public static ReadOnlySpan<TTo> Cast<TFrom, TTo>(this ReadOnlySpan<TFrom> from) where TFrom : struct, ValueType where TTo : struct, ValueType Parameters Type Name Description ReadOnlySpan <TFrom> from The ReadOnlySpan to cast. Returns Type Description ReadOnlySpan <TTo> The converted ReadOnlySpan. Type Parameters Name Description TFrom The original ReadOnlySpan type. TTo The destination ReadOnlySpan type. Cast<TFrom, TTo>(Span<TFrom>) Casts a Span from one type to another. Declaration public static Span<TTo> Cast<TFrom, TTo>(this Span<TFrom> from) where TFrom : struct, ValueType where TTo : struct, ValueType Parameters Type Name Description Span <TFrom> from The Span to cast. Returns Type Description Span <TTo> The converted Span. Type Parameters Name Description TFrom The original Span type. TTo The destination Span type. HexDump(ReadOnlySpan<Byte>, TextWriter) Prints a hex dump to the Console or an optional TextWriter. Declaration public static void HexDump(this ReadOnlySpan<byte> buffer, TextWriter tw = null) Parameters Type Name Description ReadOnlySpan < Byte > buffer The buffer to convert to a hex dump. TextWriter tw An optional TextWriter to which to write. HexDump<T>(T[], TextWriter) Prints a hex dump to the Console or an optional TextWriter. Declaration public static void HexDump<T>(this T[] buffer, TextWriter tw = null) where T : struct, ValueType Parameters Type Name Description T[] buffer TextWriter tw An optional TextWriter to which to write. Type Parameters Name Description T HexDump<T>(ReadOnlySpan<T>, TextWriter) Prints a hex dump to the Console or an optional TextWriter. Declaration public static void HexDump<T>(this ReadOnlySpan<T> buffer, TextWriter tw = null) where T : struct, ValueType Parameters Type Name Description ReadOnlySpan <T> buffer TextWriter tw An optional TextWriter to which to write. Type Parameters Name Description T Map<T>(Memory<T>, Func<T, T>) Maps each element of a Memory to a new value. Declaration public static Memory<T> Map<T>(this Memory<T> memory, Func<T, T> functor) Parameters Type Name Description Memory <T> memory The input Memory. Func <T, T> functor The function to apply to each value. Returns Type Description Memory <T> The original Memory, memory . Type Parameters Name Description T The type of the Span. Map<T>(Span<T>, Func<T, T>) Maps each element of a Span to a new value. Declaration public static Span<T> Map<T>(this Span<T> span, Func<T, T> functor) Parameters Type Name Description Span <T> span The input Span. Func <T, T> functor The function to apply to each value. Returns Type Description Span <T> The original Span, span . Type Parameters Name Description T The type of the Span. ParallelMap<T>(Memory<T>, Func<T, T>) Maps each element of a Memory to a new value in parallel. Declaration public static Memory<T> ParallelMap<T>(this Memory<T> memory, Func<T, T> functor) Parameters Type Name Description Memory <T> memory The input Memory. Func <T, T> functor The function to apply to each value. Returns Type Description Memory <T> The original Memory, memory . Type Parameters Name Description T The type of the Span. ParallelMap<T>(Span<T>, Func<T, T>) Maps each element of a Span to a new value in parallel. Declaration public static Span<T> ParallelMap<T>(this Span<T> span, Func<T, T> functor) Parameters Type Name Description Span <T> span The input Span. Func <T, T> functor The function to apply to each value. Returns Type Description Span <T> The original Span, span . Type Parameters Name Description T The type of the Span. ToHexDump(Byte[]) Returns a hex dump of the provided buffer as a string. Declaration public static string ToHexDump(this byte[] buffer) Parameters Type Name Description Byte [] buffer Returns Type Description String The hex dump. ToHexDump(ReadOnlySpan<Byte>) Returns a hex dump of the provided buffer as a string. Declaration public static string ToHexDump(this ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan < Byte > buffer The buffer to convert to a hex dump. Returns Type Description String The hex dump. ToHexDump<T>(T[]) Returns a hex dump of the provided buffer as a string. Declaration public static string ToHexDump<T>(this T[] buffer) where T : struct, ValueType Parameters Type Name Description T[] buffer Returns Type Description String The hex dump. Type Parameters Name Description T ToHexDump<T>(ReadOnlySpan<T>) Returns a hex dump of the provided buffer as a string. Declaration public static string ToHexDump<T>(this ReadOnlySpan<T> buffer) where T : struct, ValueType Parameters Type Name Description ReadOnlySpan <T> buffer Returns Type Description String The hex dump. Type Parameters Name Description T"
  },
  "api/DoubleSharp.Buffers.html": {
    "href": "api/DoubleSharp.Buffers.html",
    "title": "Namespace DoubleSharp.Buffers | DoubleSharp",
    "keywords": "Namespace DoubleSharp.Buffers Classes BufferExtensions DoubleSharp Buffer extensions."
  },
  "api/DoubleSharp.Concurrency.ConcurrencyExtensions.html": {
    "href": "api/DoubleSharp.Concurrency.ConcurrencyExtensions.html",
    "title": "Class ConcurrencyExtensions | DoubleSharp",
    "keywords": "Class ConcurrencyExtensions DoubleSharp concurrency extensions. Inheritance Object ConcurrencyExtensions Namespace : DoubleSharp.Concurrency Assembly : DoubleSharp.dll Syntax public static class ConcurrencyExtensions : Object Methods Add(ref Int32, Int32) Adds a value to this variable and stores the result, as an atomic operation. Declaration public static int Add(this ref int variable, int value) Parameters Type Name Description Int32 variable The variable containing the first number to be added. The sum of the two numbers will be stored here. Int32 value The value to be added to the variable at variable . Returns Type Description Int32 The value that was stored as a result of this operation. Exceptions Type Condition NullReferenceException The address of variable is a null pointer. Add(ref Int64, Int64) Adds a value to this variable and stores the result, as an atomic operation. Declaration public static long Add(this ref long variable, long value) Parameters Type Name Description Int64 variable Int64 value Returns Type Description Int64 The value that was stored as a result of this operation. Exceptions Type Condition NullReferenceException The address of variable is a null pointer. Add(ref UInt32, UInt32) Adds a value to this variable and stores the result, as an atomic operation. Declaration public static uint Add(this ref uint variable, uint value) Parameters Type Name Description UInt32 variable UInt32 value Returns Type Description UInt32 The value that was stored as a result of this operation. Exceptions Type Condition NullReferenceException The address of variable is a null pointer. Add(ref UInt64, UInt64) Adds a value to this variable and stores the result, as an atomic operation. Declaration public static ulong Add(this ref ulong variable, ulong value) Parameters Type Name Description UInt64 variable UInt64 value Returns Type Description UInt64 The value that was stored as a result of this operation. Exceptions Type Condition NullReferenceException The address of variable is a null pointer. And(ref Int32, Int32) Bitwise \"ands\" a value with this variable and stores the result, as an atomic operation. Declaration public static int And(this ref int variable, int value) Parameters Type Name Description Int32 variable The variable containing the first number to be combined. The result is stored here. Int32 value The value to be combined with variable . Returns Type Description Int32 The original value of the variable. Exceptions Type Condition NullReferenceException The address of variable is a null pointer. And(ref Int64, Int64) Bitwise \"ands\" a value with this variable and stores the result, as an atomic operation. Declaration public static long And(this ref long variable, long value) Parameters Type Name Description Int64 variable Int64 value Returns Type Description Int64 The original value of the variable. Exceptions Type Condition NullReferenceException The address of variable is a null pointer. And(ref UInt32, UInt32) Bitwise \"ands\" a value with this variable and stores the result, as an atomic operation. Declaration public static uint And(this ref uint variable, uint value) Parameters Type Name Description UInt32 variable UInt32 value Returns Type Description UInt32 The original value of the variable. Exceptions Type Condition NullReferenceException The address of variable is a null pointer. And(ref UInt64, UInt64) Bitwise \"ands\" a value with this variable and stores the result, as an atomic operation. Declaration public static ulong And(this ref ulong variable, ulong value) Parameters Type Name Description UInt64 variable UInt64 value Returns Type Description UInt64 The original value of the variable. Exceptions Type Condition NullReferenceException The address of variable is a null pointer. Decrement(ref Int32) Decrements this variable and stores the result, as an atomic operation. Declaration public static int Decrement(this ref int value) Parameters Type Name Description Int32 value Returns Type Description Int32 The decremented value. Exceptions Type Condition NullReferenceException The address of value is a null pointer. Decrement(ref Int64) Decrements this variable and stores the result, as an atomic operation. Declaration public static long Decrement(this ref long value) Parameters Type Name Description Int64 value Returns Type Description Int64 The decremented value. Exceptions Type Condition NullReferenceException The address of value is a null pointer. Decrement(ref UInt32) Decrements this variable and stores the result, as an atomic operation. Declaration public static uint Decrement(this ref uint value) Parameters Type Name Description UInt32 value The variable whose value is to be decremented. Returns Type Description UInt32 The decremented value. Exceptions Type Condition NullReferenceException The address of value is a null pointer. Decrement(ref UInt64) Decrements this variable and stores the result, as an atomic operation. Declaration public static ulong Decrement(this ref ulong value) Parameters Type Name Description UInt64 value Returns Type Description UInt64 The decremented value. Exceptions Type Condition NullReferenceException The address of value is a null pointer. Increment(ref Int32) Increments this variable and stores the result, as an atomic operation. Declaration public static int Increment(this ref int value) Parameters Type Name Description Int32 value Returns Type Description Int32 The incremented value. Exceptions Type Condition NullReferenceException The address of value is a null pointer. Increment(ref Int64) Increments this variable and stores the result, as an atomic operation. Declaration public static long Increment(this ref long value) Parameters Type Name Description Int64 value Returns Type Description Int64 The incremented value. Exceptions Type Condition NullReferenceException The address of value is a null pointer. Increment(ref UInt32) Increments this variable and stores the result, as an atomic operation. Declaration public static uint Increment(this ref uint value) Parameters Type Name Description UInt32 value The variable whose value is to be incremented. Returns Type Description UInt32 The incremented value. Exceptions Type Condition NullReferenceException The address of value is a null pointer. Increment(ref UInt64) Increments this variable and stores the result, as an atomic operation. Declaration public static ulong Increment(this ref ulong value) Parameters Type Name Description UInt64 value Returns Type Description UInt64 The incremented value. Exceptions Type Condition NullReferenceException The address of value is a null pointer. Locked<T>(T, Action) Locks the target object and performs the specified action. Declaration public static T Locked<T>(this T object, Action action) Parameters Type Name Description T object The object. Action action The Action delegate to perform. Returns Type Description T The provided object . Type Parameters Name Description T The type of the object. Exceptions Type Condition ArgumentNullException object is null. Locked<T>(T, Action<T>) Locks the target object and performs the specified action on it. Declaration public static T Locked<T>(this T object, Action<T> action) Parameters Type Name Description T object The object. Action <T> action The Action<T> delegate to perform on the object. Returns Type Description T The provided object . Type Parameters Name Description T The type of the object. Exceptions Type Condition ArgumentNullException object is null. Or(ref Int32, Int32) Bitwise \"ors\" a value with this variable and stores the result, as an atomic operation. Declaration public static int Or(this ref int variable, int value) Parameters Type Name Description Int32 variable The variable containing the first number to be combined. The result is stored here. Int32 value The value to be combined with variable . Returns Type Description Int32 The original value of the variable. Exceptions Type Condition NullReferenceException The address of variable is a null pointer. Or(ref Int64, Int64) Bitwise \"ors\" a value with this variable and stores the result, as an atomic operation. Declaration public static long Or(this ref long variable, long value) Parameters Type Name Description Int64 variable Int64 value Returns Type Description Int64 The original value of the variable. Exceptions Type Condition NullReferenceException The address of variable is a null pointer. Or(ref UInt32, UInt32) Bitwise \"ors\" a value with this variable and stores the result, as an atomic operation. Declaration public static uint Or(this ref uint variable, uint value) Parameters Type Name Description UInt32 variable UInt32 value Returns Type Description UInt32 The original value of the variable. Exceptions Type Condition NullReferenceException The address of variable is a null pointer. Or(ref UInt64, UInt64) Bitwise \"ors\" a value with this variable and stores the result, as an atomic operation. Declaration public static ulong Or(this ref ulong variable, ulong value) Parameters Type Name Description UInt64 variable UInt64 value Returns Type Description UInt64 The original value of the variable. Exceptions Type Condition NullReferenceException The address of variable is a null pointer."
  },
  "api/DoubleSharp.Concurrency.html": {
    "href": "api/DoubleSharp.Concurrency.html",
    "title": "Namespace DoubleSharp.Concurrency | DoubleSharp",
    "keywords": "Namespace DoubleSharp.Concurrency Classes ConcurrencyExtensions DoubleSharp concurrency extensions."
  },
  "api/DoubleSharp.Functional.FunctionalExtensions.html": {
    "href": "api/DoubleSharp.Functional.FunctionalExtensions.html",
    "title": "Class FunctionalExtensions | DoubleSharp",
    "keywords": "Class FunctionalExtensions DoubleSharp functional extensions. Inheritance Object FunctionalExtensions Namespace : DoubleSharp.Functional Assembly : DoubleSharp.dll Syntax public static class FunctionalExtensions : Object Methods Compose<TInput, TInter, TOutput>(Func<TInput, TInter>, Func<TInter, TOutput>) Returns the composition of two specified functions. Declaration public static Func<TInput, TOutput> Compose<TInput, TInter, TOutput>(this Func<TInput, TInter> inner, Func<TInter, TOutput> outer) Parameters Type Name Description Func <TInput, TInter> inner The inner function. Func <TInter, TOutput> outer The outer function. Returns Type Description Func <TInput, TOutput> A Func<T,TResult> representing the composition of the two functions. Type Parameters Name Description TInput The input type of the inner function. TInter The intermediate type that is returned by the inner function and consumed by the outer function. TOutput The output type of the outer function. Compose<TInput, TInter1, TInter2, TOutput>(Func<TInput, TInter1>, Func<TInter1, TInter2>, Func<TInter2, TOutput>) Returns the composition of three specified functions. Declaration public static Func<TInput, TOutput> Compose<TInput, TInter1, TInter2, TOutput>(this Func<TInput, TInter1> inner1, Func<TInter1, TInter2> inner2, Func<TInter2, TOutput> outer) Parameters Type Name Description Func <TInput, TInter1> inner1 The first inner function. Func <TInter1, TInter2> inner2 The second inner function. Func <TInter2, TOutput> outer The outer function. Returns Type Description Func <TInput, TOutput> A Func<T,TResult> representing the composition of the three functions. Type Parameters Name Description TInput The input type of the inner1 function. TInter1 The intermediate type that is returned by the inner1 function and consumed by the inner2 function. TInter2 The intermediate type that is returned by the inner2 function and consumed by the outer function. TOutput The output type of the outer function. Compose<TInput, TInter1, TInter2, TInter3, TOutput>(Func<TInput, TInter1>, Func<TInter1, TInter2>, Func<TInter2, TInter3>, Func<TInter3, TOutput>) Returns the composition of four specified functions. Declaration public static Func<TInput, TOutput> Compose<TInput, TInter1, TInter2, TInter3, TOutput>(this Func<TInput, TInter1> inner1, Func<TInter1, TInter2> inner2, Func<TInter2, TInter3> inner3, Func<TInter3, TOutput> outer) Parameters Type Name Description Func <TInput, TInter1> inner1 The first inner function. Func <TInter1, TInter2> inner2 The second inner function. Func <TInter2, TInter3> inner3 The third inner function. Func <TInter3, TOutput> outer The outer function. Returns Type Description Func <TInput, TOutput> A Func<T,TResult> representing the composition of the four functions. Type Parameters Name Description TInput The input type of the inner1 function. TInter1 The intermediate type that is returned by the inner1 function and consumed by the inner2 function. TInter2 The intermediate type that is returned by the inner2 function and consumed by the inner3 function. TInter3 The intermediate type that is returned by the inner3 function and consumed by the outer function. TOutput The output type of the outer function. Compose<TInput, TInter1, TInter2, TInter3, TInter4, TOutput>(Func<TInput, TInter1>, Func<TInter1, TInter2>, Func<TInter2, TInter3>, Func<TInter3, TInter4>, Func<TInter4, TOutput>) Returns the composition of five specified functions. Declaration public static Func<TInput, TOutput> Compose<TInput, TInter1, TInter2, TInter3, TInter4, TOutput>(this Func<TInput, TInter1> inner1, Func<TInter1, TInter2> inner2, Func<TInter2, TInter3> inner3, Func<TInter3, TInter4> inner4, Func<TInter4, TOutput> outer) Parameters Type Name Description Func <TInput, TInter1> inner1 The first inner function. Func <TInter1, TInter2> inner2 The second inner function. Func <TInter2, TInter3> inner3 The third inner function. Func <TInter3, TInter4> inner4 The fourth inner function. Func <TInter4, TOutput> outer The outer function. Returns Type Description Func <TInput, TOutput> A Func<T,TResult> representing the composition of the five functions. Type Parameters Name Description TInput The input type of the inner1 function. TInter1 The intermediate type that is returned by the inner1 function and consumed by the inner2 function. TInter2 The intermediate type that is returned by the inner2 function and consumed by the inner3 function. TInter3 The intermediate type that is returned by the inner3 function and consumed by the inner4 function. TInter4 The intermediate type that is returned by the inner4 function and consumed by the outer function. TOutput The output type of the outer function. Compose<TInput, TInter1, TInter2, TInter3, TInter4, TInter5, TOutput>(Func<TInput, TInter1>, Func<TInter1, TInter2>, Func<TInter2, TInter3>, Func<TInter3, TInter4>, Func<TInter4, TInter5>, Func<TInter5, TOutput>) Returns the composition of six specified functions. Declaration public static Func<TInput, TOutput> Compose<TInput, TInter1, TInter2, TInter3, TInter4, TInter5, TOutput>(this Func<TInput, TInter1> inner1, Func<TInter1, TInter2> inner2, Func<TInter2, TInter3> inner3, Func<TInter3, TInter4> inner4, Func<TInter4, TInter5> inner5, Func<TInter5, TOutput> outer) Parameters Type Name Description Func <TInput, TInter1> inner1 The first inner function. Func <TInter1, TInter2> inner2 The second inner function. Func <TInter2, TInter3> inner3 The third inner function. Func <TInter3, TInter4> inner4 The fourth inner function. Func <TInter4, TInter5> inner5 The fifth inner function. Func <TInter5, TOutput> outer The outer function. Returns Type Description Func <TInput, TOutput> A Func<T,TResult> representing the composition of the six functions. Type Parameters Name Description TInput The input type of the inner1 function. TInter1 The intermediate type that is returned by the inner1 function and consumed by the inner2 function. TInter2 The intermediate type that is returned by the inner2 function and consumed by the inner3 function. TInter3 The intermediate type that is returned by the inner3 function and consumed by the inner4 function. TInter4 The intermediate type that is returned by the inner4 function and consumed by the inner5 function. TInter5 The intermediate type that is returned by the inner5 function and consumed by the outer function. TOutput The output type of the outer function. Compose<TInput, TInter1, TInter2, TInter3, TInter4, TInter5, TInter6, TOutput>(Func<TInput, TInter1>, Func<TInter1, TInter2>, Func<TInter2, TInter3>, Func<TInter3, TInter4>, Func<TInter4, TInter5>, Func<TInter5, TInter6>, Func<TInter6, TOutput>) Returns the composition of seven specified functions. Declaration public static Func<TInput, TOutput> Compose<TInput, TInter1, TInter2, TInter3, TInter4, TInter5, TInter6, TOutput>(this Func<TInput, TInter1> inner1, Func<TInter1, TInter2> inner2, Func<TInter2, TInter3> inner3, Func<TInter3, TInter4> inner4, Func<TInter4, TInter5> inner5, Func<TInter5, TInter6> inner6, Func<TInter6, TOutput> outer) Parameters Type Name Description Func <TInput, TInter1> inner1 The first inner function. Func <TInter1, TInter2> inner2 The second inner function. Func <TInter2, TInter3> inner3 The third inner function. Func <TInter3, TInter4> inner4 The fourth inner function. Func <TInter4, TInter5> inner5 The fifth inner function. Func <TInter5, TInter6> inner6 The sixth inner function. Func <TInter6, TOutput> outer The outer function. Returns Type Description Func <TInput, TOutput> A Func<T,TResult> representing the composition of the seven functions. Type Parameters Name Description TInput The input type of the inner1 function. TInter1 The intermediate type that is returned by the inner1 function and consumed by the inner2 function. TInter2 The intermediate type that is returned by the inner2 function and consumed by the inner3 function. TInter3 The intermediate type that is returned by the inner3 function and consumed by the inner4 function. TInter4 The intermediate type that is returned by the inner4 function and consumed by the inner5 function. TInter5 The intermediate type that is returned by the inner5 function and consumed by the inner6 function. TInter6 The intermediate type that is returned by the inner6 function and consumed by the outer function. TOutput The output type of the outer function. Compose<TInput, TInter1, TInter2, TInter3, TInter4, TInter5, TInter6, TInter7, TOutput>(Func<TInput, TInter1>, Func<TInter1, TInter2>, Func<TInter2, TInter3>, Func<TInter3, TInter4>, Func<TInter4, TInter5>, Func<TInter5, TInter6>, Func<TInter6, TInter7>, Func<TInter7, TOutput>) Returns the composition of eight specified functions. Declaration public static Func<TInput, TOutput> Compose<TInput, TInter1, TInter2, TInter3, TInter4, TInter5, TInter6, TInter7, TOutput>(this Func<TInput, TInter1> inner1, Func<TInter1, TInter2> inner2, Func<TInter2, TInter3> inner3, Func<TInter3, TInter4> inner4, Func<TInter4, TInter5> inner5, Func<TInter5, TInter6> inner6, Func<TInter6, TInter7> inner7, Func<TInter7, TOutput> outer) Parameters Type Name Description Func <TInput, TInter1> inner1 The first inner function. Func <TInter1, TInter2> inner2 The second inner function. Func <TInter2, TInter3> inner3 The third inner function. Func <TInter3, TInter4> inner4 The fourth inner function. Func <TInter4, TInter5> inner5 The fifth inner function. Func <TInter5, TInter6> inner6 The sixth inner function. Func <TInter6, TInter7> inner7 The seventh inner function. Func <TInter7, TOutput> outer The outer function. Returns Type Description Func <TInput, TOutput> A Func<T,TResult> representing the composition of the eight functions. Type Parameters Name Description TInput The input type of the inner1 function. TInter1 The intermediate type that is returned by the inner1 function and consumed by the inner2 function. TInter2 The intermediate type that is returned by the inner2 function and consumed by the inner3 function. TInter3 The intermediate type that is returned by the inner3 function and consumed by the inner4 function. TInter4 The intermediate type that is returned by the inner4 function and consumed by the inner5 function. TInter5 The intermediate type that is returned by the inner5 function and consumed by the inner6 function. TInter6 The intermediate type that is returned by the inner6 function and consumed by the inner7 function. TInter7 The intermediate type that is returned by the inner7 function and consumed by the outer function. TOutput The output type of the outer function."
  },
  "api/DoubleSharp.Functional.html": {
    "href": "api/DoubleSharp.Functional.html",
    "title": "Namespace DoubleSharp.Functional | DoubleSharp",
    "keywords": "Namespace DoubleSharp.Functional Classes FunctionalExtensions DoubleSharp functional extensions."
  },
  "api/DoubleSharp.IO.BinaryIOExtensions.html": {
    "href": "api/DoubleSharp.IO.BinaryIOExtensions.html",
    "title": "Class BinaryIOExtensions | DoubleSharp",
    "keywords": "Class BinaryIOExtensions DoubleSharp BinaryReader/BinaryWriter Extensions. Inheritance Object BinaryIOExtensions Namespace : DoubleSharp.IO Assembly : DoubleSharp.dll Syntax public static class BinaryIOExtensions : Object Methods ReadVector2(BinaryReader) Read a Vector2 from this stream. The current position of the stream is advanced by eight. Declaration public static Vector2 ReadVector2(this BinaryReader br) Parameters Type Name Description BinaryReader br The BinaryReader to read from. Returns Type Description Vector2 A Vector2 read from the BinaryReader. ReadVector2D(BinaryReader) Read a Vector2D from this stream. The current position of the stream is advanced by sixteen. Declaration public static Vector2D ReadVector2D(this BinaryReader br) Parameters Type Name Description BinaryReader br The BinaryReader to read from. Returns Type Description Vector2D A Vector2D read from the BinaryReader. ReadVector3(BinaryReader) Read a Vector3 from this stream. The current position of the stream is advanced by twelve. Declaration public static Vector3 ReadVector3(this BinaryReader br) Parameters Type Name Description BinaryReader br The BinaryReader to read from. Returns Type Description Vector3 A Vector3 read from the BinaryReader. ReadVector4(BinaryReader) Read a Vector4 from this stream. The current position of the stream is advanced by sixteen. Declaration public static Vector4 ReadVector4(this BinaryReader br) Parameters Type Name Description BinaryReader br The BinaryReader to read from. Returns Type Description Vector4 A Vector4 read from the BinaryReader. Write(BinaryWriter, Vector2D) Writes a Vector2D to this stream. The current position of the stream is advanced by sixteen. Declaration public static void Write(this BinaryWriter bw, Vector2D vec) Parameters Type Name Description BinaryWriter bw The BinaryWriter to write to. Vector2D vec The Vector2D to write. Write(BinaryWriter, Vector2) Writes a Vector2 to this stream. The current position of the stream is advanced by eight. Declaration public static void Write(this BinaryWriter bw, Vector2 vec) Parameters Type Name Description BinaryWriter bw The BinaryWriter to write to. Vector2 vec The Vector2 to write. Write(BinaryWriter, Vector3) Writes a Vector3 to this stream. The current position of the stream is advanced by twelve. Declaration public static void Write(this BinaryWriter bw, Vector3 vec) Parameters Type Name Description BinaryWriter bw The BinaryWriter to write to. Vector3 vec The Vector3 to write. Write(BinaryWriter, Vector4) Writes a Vector4 to this stream. The current position of the stream is advanced by sixteen. Declaration public static void Write(this BinaryWriter bw, Vector4 vec) Parameters Type Name Description BinaryWriter bw The BinaryWriter to write to. Vector4 vec The Vector4 to write."
  },
  "api/DoubleSharp.IO.html": {
    "href": "api/DoubleSharp.IO.html",
    "title": "Namespace DoubleSharp.IO | DoubleSharp",
    "keywords": "Namespace DoubleSharp.IO Classes BinaryIOExtensions DoubleSharp BinaryReader/BinaryWriter Extensions."
  },
  "api/DoubleSharp.Linq.html": {
    "href": "api/DoubleSharp.Linq.html",
    "title": "Namespace DoubleSharp.Linq | DoubleSharp",
    "keywords": "Namespace DoubleSharp.Linq Classes LinqExtensions DoubleSharp LINQ Extensions. TupleExtensions DoubleSharp extensions to convert homogenously-typed tuples to IEnumerables."
  },
  "api/DoubleSharp.Linq.LinqExtensions.html": {
    "href": "api/DoubleSharp.Linq.LinqExtensions.html",
    "title": "Class LinqExtensions | DoubleSharp",
    "keywords": "Class LinqExtensions DoubleSharp LINQ Extensions. Inheritance Object LinqExtensions Namespace : DoubleSharp.Linq Assembly : DoubleSharp.dll Syntax public static class LinqExtensions : Object Methods ArgMax<T>(ICollection<T>) Returns the index of the maximum value in a sequence. Declaration public static int ArgMax<T>(this ICollection<T> source) Parameters Type Name Description ICollection <T> source The source collection. Returns Type Description Int32 The index of the element with the maximum value. Type Parameters Name Description T The type of elements of source. Remarks This is an alias of IndexOfMax<T>(ICollection<T>) . Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. ArgMax<T>(ICollection<T>, IComparer<T>) Returns the index of the maximum value in a sequence. Declaration public static int ArgMax<T>(this ICollection<T> source, IComparer<T> comparer) Parameters Type Name Description ICollection <T> source The source collection. IComparer <T> comparer The IComparer<T> to compare values. Returns Type Description Int32 The index of the element with the maximum value. Type Parameters Name Description T The type of elements of source. Remarks This is an alias of IndexOfMax<T>(ICollection<T>, IComparer<T>) . Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. ArgMax<TSource, TKey>(ICollection<TSource>, Func<TSource, TKey>) Returns the index of the maximum value in a sequence according to a specified key selector function. Declaration public static int ArgMax<TSource, TKey>(this ICollection<TSource> source, Func<TSource, TKey> keySelector) Parameters Type Name Description ICollection <TSource> source The source collection. Func <TSource, TKey> keySelector A function to extract the key for each element. Returns Type Description Int32 The index of the element with the maximum value. Type Parameters Name Description TSource The type of elements of source. TKey The type of the key by which to compare elements. Remarks This is an alias of IndexOfMaxBy<TSource, TKey>(ICollection<TSource>, Func<TSource, TKey>) . Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. ArgMax<TSource, TKey>(ICollection<TSource>, Func<TSource, TKey>, IComparer<TKey>) Returns the index of the maximum value in a sequence according to a specified key selector function. Declaration public static int ArgMax<TSource, TKey>(this ICollection<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer) Parameters Type Name Description ICollection <TSource> source The source collection. Func <TSource, TKey> keySelector A function to extract the key for each element. IComparer <TKey> comparer The IComparer<T> to compare values. Returns Type Description Int32 The index of the element with the maximum value. Type Parameters Name Description TSource The type of elements of source. TKey The type of the key by which to compare elements. Remarks This is an alias of IndexOfMaxBy<TSource, TKey>(ICollection<TSource>, Func<TSource, TKey>, IComparer<TKey>) . Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. ArgMin<T>(ICollection<T>) Returns the index of the minimum value in a sequence. Declaration public static int ArgMin<T>(this ICollection<T> source) Parameters Type Name Description ICollection <T> source The source collection. Returns Type Description Int32 The index of the element with the minimum value. Type Parameters Name Description T The type of elements of source. Remarks This is an alias of IndexOfMin<T>(ICollection<T>) . Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. ArgMin<T>(ICollection<T>, IComparer<T>) Returns the index of the minimum value in a sequence. Declaration public static int ArgMin<T>(this ICollection<T> source, IComparer<T> comparer) Parameters Type Name Description ICollection <T> source The source collection. IComparer <T> comparer The IComparer<T> to compare values. Returns Type Description Int32 The index of the element with the minimum value. Type Parameters Name Description T The type of elements of source. Remarks This is an alias of IndexOfMin<T>(ICollection<T>, IComparer<T>) . Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. ArgMin<TSource, TKey>(ICollection<TSource>, Func<TSource, TKey>) Returns the index of the minimum value in a sequence according to a specified key selector function. Declaration public static int ArgMin<TSource, TKey>(this ICollection<TSource> source, Func<TSource, TKey> keySelector) Parameters Type Name Description ICollection <TSource> source The source collection. Func <TSource, TKey> keySelector A function to extract the key for each element. Returns Type Description Int32 The index of the element with the minimum value. Type Parameters Name Description TSource The type of elements of source. TKey The type of the key by which to compare elements. Remarks This is an alias of IndexOfMinBy<TSource, TKey>(ICollection<TSource>, Func<TSource, TKey>) . Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. ArgMin<TSource, TKey>(ICollection<TSource>, Func<TSource, TKey>, IComparer<TKey>) Returns the index of the minimum value in a sequence according to a specified key selector function. Declaration public static int ArgMin<TSource, TKey>(this ICollection<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer) Parameters Type Name Description ICollection <TSource> source The source collection. Func <TSource, TKey> keySelector A function to extract the key for each element. IComparer <TKey> comparer The IComparer<T> to compare values. Returns Type Description Int32 The index of the element with the minimum value. Type Parameters Name Description TSource The type of elements of source. TKey The type of the key by which to compare elements. Remarks This is an alias of IndexOfMinBy<TSource, TKey>(ICollection<TSource>, Func<TSource, TKey>, IComparer<TKey>) . Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. ConstructMany<T>(Int32) A generator that constructs size instances of T . Declaration public static IEnumerable<T> ConstructMany<T>(this int size) where T : new() Parameters Type Name Description Int32 size Number of instances to construct. Returns Type Description IEnumerable <T> An IEnumerable T of size generated T instances. Type Parameters Name Description T The type to construct. DictGroupBy<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) Groups the elements of a sequence according to a specified key selector function and projects the resulting groups into a dictionary. Declaration public static Dictionary<TKey, IEnumerable<TValue>> DictGroupBy<TValue, TKey>(this IEnumerable<TValue> source, Func<TValue, TKey> keySelector) Parameters Type Name Description IEnumerable <TValue> source The source enumerable. Func <TValue, TKey> keySelector A function to extract the key for each element. Returns Type Description Dictionary <TKey, IEnumerable <TValue>> A Dictionary< TKey , IEnumerable< TValue >> where each dictionary entry represents a group. Type Parameters Name Description TValue The type of elements of source. TKey The type of the key returned by keySelector . Exceptions Type Condition ArgumentNullException source or keySelector is null. DictGroupBy<TValue, TKey, TResult>(IEnumerable<TValue>, Func<TValue, TKey>, Func<TValue, TResult>) Groups the elements of a sequence according to a specified key selector function and projects the resulting groups into a dictionary, with the elements of each group transformed using a specified function. Declaration public static Dictionary<TKey, IEnumerable<TResult>> DictGroupBy<TValue, TKey, TResult>(this IEnumerable<TValue> source, Func<TValue, TKey> keySelector, Func<TValue, TResult> valueSelector) Parameters Type Name Description IEnumerable <TValue> source The source enumerable. Func <TValue, TKey> keySelector A function to extract the key for each element. Func <TValue, TResult> valueSelector A transform function to apply to each group element. Returns Type Description Dictionary <TKey, IEnumerable <TResult>> A Dictionary< TKey , IEnumerable< TResult >> where each dictionary entry represents a group. Type Parameters Name Description TValue The type of elements of source. TKey The type of the key returned by keySelector . TResult The type of the value returned by valueSelector . Remarks The valueSelector transform function is applied after grouping. Exceptions Type Condition ArgumentNullException source or keySelector or valueSelector is null. DictGroupByLists<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) Groups the elements of a sequence according to a specified key selector function and projects the resulting groups into a dictionary. Declaration public static Dictionary<TKey, List<TValue>> DictGroupByLists<TValue, TKey>(this IEnumerable<TValue> source, Func<TValue, TKey> keySelector) Parameters Type Name Description IEnumerable <TValue> source The source enumerable. Func <TValue, TKey> keySelector A function to extract the key for each element. Returns Type Description Dictionary <TKey, List <TValue>> A Dictionary< TKey , List< TValue >> where each dictionary entry represents a group. Type Parameters Name Description TValue The type of elements of source. TKey The type of the key returned by keySelector . Exceptions Type Condition ArgumentNullException source or keySelector is null. DictGroupByLists<TValue, TKey, TResult>(IEnumerable<TValue>, Func<TValue, TKey>, Func<TValue, TResult>) Groups the elements of a sequence according to a specified key selector function and projects the resulting groups into a dictionary, with the elements of each group transformed using a specified function. Declaration public static Dictionary<TKey, List<TResult>> DictGroupByLists<TValue, TKey, TResult>(this IEnumerable<TValue> source, Func<TValue, TKey> keySelector, Func<TValue, TResult> valueSelector) Parameters Type Name Description IEnumerable <TValue> source The source enumerable. Func <TValue, TKey> keySelector A function to extract the key for each element. Func <TValue, TResult> valueSelector A transform function to apply to each group element. Returns Type Description Dictionary <TKey, List <TResult>> A Dictionary< TKey , List< TResult >> where each dictionary entry represents a group. Type Parameters Name Description TValue The type of elements of source. TKey The type of the key returned by keySelector . TResult The type of the value returned by valueSelector . Remarks The valueSelector transform function is applied after grouping. Exceptions Type Condition ArgumentNullException source or keySelector or valueSelector is null. Enumerate<T>(IEnumerable<T>) Projects each element of a sequence into a tuple of type ( Int32 , T ) representing the 0-based index of the element and its value. Declaration public static IEnumerable<(int, T)> Enumerate<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source The source enumerable. Returns Type Description IEnumerable < (, ) < Int32 , T>> An IEnumerable<T> whose elements are ( Int32 , T ) tuples containing the 0-based index and value of each element in the source enumerable. Type Parameters Name Description T The type of objects to enumerate. Exceptions Type Condition ArgumentNullException source is null. EnumerateComponents(ITuple) Enumerates the components of a tuple. Declaration public static IEnumerable<object> EnumerateComponents(this ITuple tuple) Parameters Type Name Description ITuple tuple The input tuple. Returns Type Description IEnumerable < Object > An IEnumerable<object?> containing the elements of tuple . EnumerateComponents<T>(ITuple) Enumerates the components of a tuple where the component type is compatible with T . Declaration public static IEnumerable<T> EnumerateComponents<T>(this ITuple tuple) Parameters Type Name Description ITuple tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An IEnumerable<T> containing all components from the tuple whose type was compatible with T . If tuple is null, no elements are returned. Type Parameters Name Description T The type of components to enumerate. Flatten<T>(IEnumerable<IEnumerable<T>>) Flattens the elements of nested enumerables into a single enumerable. Declaration public static IEnumerable<T> Flatten<T>(this IEnumerable<IEnumerable<T>> source) Parameters Type Name Description IEnumerable < IEnumerable <T>> source The source enumerable. Returns Type Description IEnumerable <T> An IEnumerable<T> whose elements are the union of all source elements. Type Parameters Name Description T The type of elements of source. Exceptions Type Condition ArgumentNullException source is null. ForEach<T>(IEnumerable<T>, Action<T>) Performs the specified action on each element of the IEnumerable<T> . Declaration public static void ForEach<T>(this IEnumerable<T> source, Action<T> action) Parameters Type Name Description IEnumerable <T> source The source enumerable. Action <T> action The Action<T> delegate to perform on each element of the IEnumerable<T> . Type Parameters Name Description T The type of objects to enumerate. Exceptions Type Condition ArgumentNullException source or action is null. IndexOfMax<T>(ICollection<T>) Returns the index of the maximum value in a sequence. Declaration public static int IndexOfMax<T>(this ICollection<T> source) Parameters Type Name Description ICollection <T> source The source collection. Returns Type Description Int32 The index of the element with the maximum value. Type Parameters Name Description T The type of elements of source. Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. IndexOfMax<T>(ICollection<T>, IComparer<T>) Returns the index of the maximum value in a sequence. Declaration public static int IndexOfMax<T>(this ICollection<T> source, IComparer<T> comparer) Parameters Type Name Description ICollection <T> source The source collection. IComparer <T> comparer The IComparer<T> to compare values. Returns Type Description Int32 The index of the element with the maximum value. Type Parameters Name Description T The type of elements of source. Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. IndexOfMaxBy<TSource, TKey>(ICollection<TSource>, Func<TSource, TKey>) Returns the index of the maximum value in a sequence according to a specified key selector function. Declaration public static int IndexOfMaxBy<TSource, TKey>(this ICollection<TSource> source, Func<TSource, TKey> keySelector) Parameters Type Name Description ICollection <TSource> source The source collection. Func <TSource, TKey> keySelector A function to extract the key for each element. Returns Type Description Int32 The index of the element with the maximum value. Type Parameters Name Description TSource The type of elements of source. TKey The type of the key by which to compare elements. Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. IndexOfMaxBy<TSource, TKey>(ICollection<TSource>, Func<TSource, TKey>, IComparer<TKey>) Returns the index of the maximum value in a sequence according to a specified key selector function. Declaration public static int IndexOfMaxBy<TSource, TKey>(this ICollection<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer) Parameters Type Name Description ICollection <TSource> source The source collection. Func <TSource, TKey> keySelector A function to extract the key for each element. IComparer <TKey> comparer The IComparer<T> to compare values. Returns Type Description Int32 The index of the element with the maximum value. Type Parameters Name Description TSource The type of elements of source. TKey The type of the key by which to compare elements. Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. IndexOfMin<T>(ICollection<T>) Returns the index of the minimum value in a sequence. Declaration public static int IndexOfMin<T>(this ICollection<T> source) Parameters Type Name Description ICollection <T> source The source collection. Returns Type Description Int32 The index of the element with the minimum value. Type Parameters Name Description T The type of elements of source. Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. IndexOfMin<T>(ICollection<T>, IComparer<T>) Returns the index of the minimum value in a sequence. Declaration public static int IndexOfMin<T>(this ICollection<T> source, IComparer<T> comparer) Parameters Type Name Description ICollection <T> source The source collection. IComparer <T> comparer The IComparer<T> to compare values. Returns Type Description Int32 The index of the element with the minimum value. Type Parameters Name Description T The type of elements of source. Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. IndexOfMinBy<TSource, TKey>(ICollection<TSource>, Func<TSource, TKey>) Returns the index of the minimum value in a sequence according to a specified key selector function. Declaration public static int IndexOfMinBy<TSource, TKey>(this ICollection<TSource> source, Func<TSource, TKey> keySelector) Parameters Type Name Description ICollection <TSource> source The source collection. Func <TSource, TKey> keySelector A function to extract the key for each element. Returns Type Description Int32 The index of the element with the minimum value. Type Parameters Name Description TSource The type of elements of source. TKey The type of the key by which to compare elements. Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. IndexOfMinBy<TSource, TKey>(ICollection<TSource>, Func<TSource, TKey>, IComparer<TKey>) Returns the index of the minimum value in a sequence according to a specified key selector function. Declaration public static int IndexOfMinBy<TSource, TKey>(this ICollection<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer) Parameters Type Name Description ICollection <TSource> source The source collection. Func <TSource, TKey> keySelector A function to extract the key for each element. IComparer <TKey> comparer The IComparer<T> to compare values. Returns Type Description Int32 The index of the element with the minimum value. Type Parameters Name Description TSource The type of elements of source. TKey The type of the key by which to compare elements. Exceptions Type Condition ArgumentNullException source is null. InvalidOperationException source contains no elements. Median<T>(IEnumerable<T>) Finds the median of a sequence of numbers. Declaration public static T Median<T>(this IEnumerable<T> source) where T : INumber<T> Parameters Type Name Description IEnumerable <T> source The sequence of numbers. Returns Type Description T The median of the sequence. Type Parameters Name Description T The type of number. Exceptions Type Condition InvalidOperationException The sequence must contain at least one number. MedianBy<TValue, TKey>(IEnumerable<TValue>, Func<TValue, TKey>) Finds the value which contains the median, using a function to order the values. WARNING: This will always return the lower end of the median if it's an even-lengthed sequence. Declaration public static TValue MedianBy<TValue, TKey>(this IEnumerable<TValue> source, Func<TValue, TKey> by) Parameters Type Name Description IEnumerable <TValue> source The sequence of values. Func <TValue, TKey> by The function on which to sort the values. Returns Type Description TValue For an odd-lengthed sequence, returns the middle element after sorting. For an even-lengthed sequence, returns the lower of the two middle elements. Type Parameters Name Description TValue The type of the input values. TKey The type to sort by. Exceptions Type Condition InvalidOperationException The sequence must contain at least one number. Range(Int32) Generates a sequence of numbers from 0 to end , exclusive. Declaration public static IEnumerable<int> Range(this int end) Parameters Type Name Description Int32 end The exclusive end of the range. Returns Type Description IEnumerable < Int32 > An IEnumerable{int} containing values in the range. Range((Int32, Int32, Int32)) Generates a sequence of numbers from range .Start to range .End, exclusive, stepping by range .Step. Declaration public static IEnumerable<int> Range(this (int, int, int) range) Parameters Type Name Description (, , ) < Int32 , Int32 , Int32 > range The start, exclusive end, and step value of the range. Returns Type Description IEnumerable < Int32 > An IEnumerable{int} containing values in the range. Range((Int32, Int32)) Generates a sequence of numbers from range .Start to range .End, exclusive. Declaration public static IEnumerable<int> Range(this (int, int) range) Parameters Type Name Description (, ) < Int32 , Int32 > range The start and exclusive end of the range. Returns Type Description IEnumerable < Int32 > An IEnumerable{int} containing values in the range. Shuffle<T>(IList<T>) Randomises the order of the elements in the list using the Fisher-Yates algorithm. Declaration public static void Shuffle<T>(this IList<T> list) Parameters Type Name Description IList <T> list The list to be shuffled. Type Parameters Name Description T The type of list elements. Remarks Random numbers are generated on a thread-local basis using Rng . Exceptions Type Condition ArgumentNullException list is null. Shuffled<T>(IEnumerable<T>) Generates a list containing the elements of a source sequence, in random order, without altering the source. Declaration public static List<T> Shuffled<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source The source enumerable. Returns Type Description List <T> A list containing the elements of source shuffled. Type Parameters Name Description T The type of elements of source. Remarks Shuffling is performed with the Fisher-Yates algorithm. Random numbers are generated on a thread-local basis using Rng . Exceptions Type Condition ArgumentNullException source is null. Times(Int32, Action) Executes a function count times. Declaration public static void Times(this int count, Action functor) Parameters Type Name Description Int32 count The number of times to execute functor . Action functor The function to execute. Times(Int32, Action<Int32>) Executes a function count times, passing an index to the function. Declaration public static void Times(this int count, Action<int> functor) Parameters Type Name Description Int32 count The number of times to execute functor . Action < Int32 > functor The function to execute. Times<T>(Int32, Func<T>) Executes a function count times and generates an IEnumerable{T} from the results. Declaration public static IEnumerable<T> Times<T>(this int count, Func<T> functor) Parameters Type Name Description Int32 count The number of times to execute functor . Func <T> functor The function to execute. Returns Type Description IEnumerable <T> An IEnumerable{T} containing the values from the executed functor s. Type Parameters Name Description T The type of return from functor . Times<T>(Int32, Func<Int32, T>) Executes a function count times, passing an index, and generates an IEnumerable{T} from the results. Declaration public static IEnumerable<T> Times<T>(this int count, Func<int, T> functor) Parameters Type Name Description Int32 count The number of times to execute functor . Func < Int32 , T> functor The function to execute. Returns Type Description IEnumerable <T> An IEnumerable{T} containing the values from the executed functor s. Type Parameters Name Description T The type of return from functor . ToDictionary<TKey, TValue>(IEnumerable<(TKey, TValue)>) Creates a Dictionary<TKey,TValue> from an IEnumerable<T> containing tuples of type ( TKey , TValue ). Declaration public static Dictionary<TKey, TValue> ToDictionary<TKey, TValue>(this IEnumerable<(TKey, TValue)> source) Parameters Type Name Description IEnumerable < (, ) <TKey, TValue>> source The source enumerable. Returns Type Description Dictionary <TKey, TValue> A Dictionary<TKey,TValue> that contains elements of type TValue selected from the input sequence. Type Parameters Name Description TKey The type of the key. TValue The type of the value. Exceptions Type Condition ArgumentNullException source is null."
  },
  "api/DoubleSharp.Linq.TupleExtensions.html": {
    "href": "api/DoubleSharp.Linq.TupleExtensions.html",
    "title": "Class TupleExtensions | DoubleSharp",
    "keywords": "Class TupleExtensions DoubleSharp extensions to convert homogenously-typed tuples to IEnumerables. Inheritance Object TupleExtensions Namespace : DoubleSharp.Linq Assembly : DoubleSharp.dll Syntax public static class TupleExtensions : Object Methods AsEnumerable<T>((T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) tuple) Parameters Type Name Description ValueTuple <T, T, T, T, T, T, T, ValueTuple <T, T, T, T, T, T, T, (, , , , , ) <T, T, T, T, T, T>>> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) tuple) Parameters Type Name Description ValueTuple <T, T, T, T, T, T, T, ValueTuple <T, T, T, T, T, T, T, (, , , , ) <T, T, T, T, T>>> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) tuple) Parameters Type Name Description ValueTuple <T, T, T, T, T, T, T, ValueTuple <T, T, T, T, T, T, T, (, , , ) <T, T, T, T>>> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) tuple) Parameters Type Name Description ValueTuple <T, T, T, T, T, T, T, ValueTuple <T, T, T, T, T, T, T, (, , ) <T, T, T>>> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) tuple) Parameters Type Name Description ValueTuple <T, T, T, T, T, T, T, ValueTuple <T, T, T, T, T, T, T, (, ) <T, T>>> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T, T, T, T, T, T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) tuple) Parameters Type Name Description ValueTuple <T, T, T, T, T, T, T, ValueTuple <T, T, T, T, T, T, T, () <T>>> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T, T, T, T, T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T, T, T, T, T, T, T, T, T) tuple) Parameters Type Name Description ValueTuple <T, T, T, T, T, T, T, (, , , , , , ) <T, T, T, T, T, T, T>> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T, T, T, T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T, T, T, T, T, T, T, T) tuple) Parameters Type Name Description ValueTuple <T, T, T, T, T, T, T, (, , , , , ) <T, T, T, T, T, T>> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T, T, T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T, T, T, T, T, T, T) tuple) Parameters Type Name Description ValueTuple <T, T, T, T, T, T, T, (, , , , ) <T, T, T, T, T>> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T, T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T, T, T, T, T, T) tuple) Parameters Type Name Description ValueTuple <T, T, T, T, T, T, T, (, , , ) <T, T, T, T>> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T, T, T, T, T) tuple) Parameters Type Name Description ValueTuple <T, T, T, T, T, T, T, (, , ) <T, T, T>> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T, T, T, T) tuple) Parameters Type Name Description ValueTuple <T, T, T, T, T, T, T, (, ) <T, T>> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T, T, T) tuple) Parameters Type Name Description ValueTuple <T, T, T, T, T, T, T, () <T>> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T, T) tuple) Parameters Type Name Description (, , , , , , ) <T, T, T, T, T, T, T> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T, T) tuple) Parameters Type Name Description (, , , , , ) <T, T, T, T, T, T> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T, T) tuple) Parameters Type Name Description (, , , , ) <T, T, T, T, T> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T, T) tuple) Parameters Type Name Description (, , , ) <T, T, T, T> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T, T) tuple) Parameters Type Name Description (, , ) <T, T, T> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple . AsEnumerable<T>((T, T)) Enumerates the components of a tuple when all the types are the same. Declaration public static IEnumerable<T> AsEnumerable<T>(this (T, T) tuple) Parameters Type Name Description (, ) <T, T> tuple The tuple to enumerate. Returns Type Description IEnumerable <T> An enumerable sequence of the tuple values. Type Parameters Name Description T The type of each element of the tuple ."
  },
  "api/DoubleSharp.MathPlus.html": {
    "href": "api/DoubleSharp.MathPlus.html",
    "title": "Namespace DoubleSharp.MathPlus | DoubleSharp",
    "keywords": "Namespace DoubleSharp.MathPlus Classes MathExtensions DoubleSharp Math Extensions. Solving Provides methods for numerical root finding. SwizzleExtensions Swizzle extension methods for System.Numerics.Vector2/3/4. Vector2D Represents a vector with two double-precision doubleing-point values. VectorExtensions DoubleSharp vector extensions."
  },
  "api/DoubleSharp.MathPlus.MathExtensions.html": {
    "href": "api/DoubleSharp.MathPlus.MathExtensions.html",
    "title": "Class MathExtensions | DoubleSharp",
    "keywords": "Class MathExtensions DoubleSharp Math Extensions. Inheritance Object MathExtensions Namespace : DoubleSharp.MathPlus Assembly : DoubleSharp.dll Syntax public static class MathExtensions : Object Methods Ceil(Double) Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number. Declaration public static double Ceil(this double x) Parameters Type Name Description Double x A double-precision floating-point number. Returns Type Description Double The smallest integral value that is greater than or equal to x . If x is equal to NaN, NegativeInfinity, or PositiveInfinity, that value is returned. Note that this method returns a Single instead of an integral type. Ceil(Single) Returns the smallest integral value that is greater than or equal to the specified single-precision floating-point number. Declaration public static float Ceil(this float x) Parameters Type Name Description Single x A single-precision floating-point number. Returns Type Description Single The smallest integral value that is greater than or equal to x . If x is equal to NaN, NegativeInfinity, or PositiveInfinity, that value is returned. Note that this method returns a Single instead of an integral type. CeilInt(Double) Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number. Declaration public static int CeilInt(this double x) Parameters Type Name Description Double x A double-precision floating-point number. Returns Type Description Int32 The smallest integral value that is greater than or equal to x . CeilInt(Single) Returns the smallest integral value that is greater than or equal to the specified single-precision floating-point number. Declaration public static int CeilInt(this float x) Parameters Type Name Description Single x A single-precision floating-point number. Returns Type Description Int32 The smallest integral value that is greater than or equal to x . Floor(Double) Returns the largest integral value less than or equal to the specified double-precision floating-point number. Declaration public static double Floor(this double x) Parameters Type Name Description Double x A double-precision floating-point number. Returns Type Description Double The largest integral value less than or equal to x . If x is equal to NaN, NegativeInfinity, or PositiveInfinity, that value is returned. Floor(Single) Returns the largest integral value less than or equal to the specified single-precision floating-point number. Declaration public static float Floor(this float x) Parameters Type Name Description Single x A single-precision floating-point number. Returns Type Description Single The largest integral value less than or equal to x . If x is equal to NaN, NegativeInfinity, or PositiveInfinity, that value is returned. FloorInt(Double) Returns the largest integral value less than or equal to the specified double-precision floating-point number. Declaration public static int FloorInt(this double x) Parameters Type Name Description Double x A double-precision floating-point number. Returns Type Description Int32 The largest integral value less than or equal to x . FloorInt(Single) Returns the largest integral value less than or equal to the specified single-precision floating-point number. Declaration public static int FloorInt(this float x) Parameters Type Name Description Single x A single-precision floating-point number. Returns Type Description Int32 The largest integral value less than or equal to x . HasBit(Byte, Int32) Returns true if the specified bit is set in the input value. Declaration public static bool HasBit(this byte v, int bit) Parameters Type Name Description Byte v The value in which to check the bit. Int32 bit The position of the bit to check. Returns Type Description Boolean A boolean representing the presence or absence of bit position bit in v . HasBit(UInt16, Int32) Returns true if the specified bit is set in the input value. Declaration public static bool HasBit(this ushort v, int bit) Parameters Type Name Description UInt16 v Int32 bit The position of the bit to check. Returns Type Description Boolean A boolean representing the presence or absence of bit position bit in v . HasBit(UInt32, Int32) Returns true if the specified bit is set in the input value. Declaration public static bool HasBit(this uint v, int bit) Parameters Type Name Description UInt32 v Int32 bit The position of the bit to check. Returns Type Description Boolean A boolean representing the presence or absence of bit position bit in v . HasBit(UInt64, Int32) Returns true if the specified bit is set in the input value. Declaration public static bool HasBit(this ulong v, int bit) Parameters Type Name Description UInt64 v Int32 bit The position of the bit to check. Returns Type Description Boolean A boolean representing the presence or absence of bit position bit in v . Lerp(Double, Double, Double) Performs linear interpolation. Declaration public static double Lerp(this double a, double b, double t) Parameters Type Name Description Double a Double b Double t Returns Type Description Double The linear interpolation of a to b using t in the range 0-1. Lerp(Single, Single, Single) Performs linear interpolation. Declaration public static float Lerp(this float a, float b, float t) Parameters Type Name Description Single a The start value. Single b The end value. Single t A value ranging from 0 to 1. Returns Type Description Single The linear interpolation of a to b using t in the range 0-1. Round(Double) Rounds a double-precision floating-point value to the nearest integral value, and rounds midpoint values to the nearest even number. Declaration public static double Round(this double x) Parameters Type Name Description Double x A double-precision floating-point number to be rounded. Returns Type Description Double The integer nearest x . If the fractional component of x is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns a Double instead of an integral type. Round(Single) Rounds a single-precision floating-point value to the nearest integral value, and rounds midpoint values to the nearest even number. Declaration public static float Round(this float x) Parameters Type Name Description Single x A single-precision floating-point number to be rounded. Returns Type Description Single The integer nearest x . If the fractional component of x is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns a Single instead of an integral type. RoundInt(Double) Rounds a double-precision floating-point value to the nearest integral value, and rounds midpoint values to the nearest even number. Returns the integral value. Declaration public static int RoundInt(this double x) Parameters Type Name Description Double x A double-precision floating-point number to be rounded. Returns Type Description Int32 The integer nearest x . If the fractional component of x is halfway between two integers, one of which is even and the other odd, then the even number is returned. RoundInt(Single) Rounds a single-precision floating-point value to the nearest integral value, and rounds midpoint values to the nearest even number. Returns the integral value. Declaration public static int RoundInt(this float x) Parameters Type Name Description Single x A single-precision floating-point number to be rounded. Returns Type Description Int32 The integer nearest x . If the fractional component of x is halfway between two integers, one of which is even and the other odd, then the even number is returned. SetBit(Byte, Int32, Boolean) Sets a bit in the value to 1 when the condition is true and 0 when the condition is false. Declaration public static byte SetBit(this byte v, int bit, bool cond) Parameters Type Name Description Byte v The initial value. Int32 bit The position of the bit to set. Boolean cond The condition on which to set/unset the bit. Returns Type Description Byte The value v with bit bit set to 1 when cond is true and 0 when cond is false. SetBit(UInt16, Int32, Boolean) Sets a bit in the value to 1 when the condition is true and 0 when the condition is false. Declaration public static ushort SetBit(this ushort v, int bit, bool cond) Parameters Type Name Description UInt16 v Int32 bit The position of the bit to set. Boolean cond The condition on which to set/unset the bit. Returns Type Description UInt16 The value v with bit bit set to 1 when cond is true and 0 when cond is false. SetBit(UInt32, Int32, Boolean) Sets a bit in the value to 1 when the condition is true and 0 when the condition is false. Declaration public static uint SetBit(this uint v, int bit, bool cond) Parameters Type Name Description UInt32 v Int32 bit The position of the bit to set. Boolean cond The condition on which to set/unset the bit. Returns Type Description UInt32 The value v with bit bit set to 1 when cond is true and 0 when cond is false. SetBit(UInt64, Int32, Boolean) Sets a bit in the value to 1 when the condition is true and 0 when the condition is false. Declaration public static ulong SetBit(this ulong v, int bit, bool cond) Parameters Type Name Description UInt64 v Int32 bit The position of the bit to set. Boolean cond The condition on which to set/unset the bit. Returns Type Description UInt64 The value v with bit bit set to 1 when cond is true and 0 when cond is false. WithBit(Byte, Int32) Sets a bit in the value to 1. Declaration public static byte WithBit(this byte v, int bit) Parameters Type Name Description Byte v The initial value. Int32 bit The position of the bit to set. Returns Type Description Byte The value v with bit bit set to 1. WithBit(UInt16, Int32) Sets a bit in the value to 1. Declaration public static ushort WithBit(this ushort v, int bit) Parameters Type Name Description UInt16 v Int32 bit The position of the bit to set. Returns Type Description UInt16 The value v with bit bit set to 1. WithBit(UInt32, Int32) Sets a bit in the value to 1. Declaration public static uint WithBit(this uint v, int bit) Parameters Type Name Description UInt32 v Int32 bit The position of the bit to set. Returns Type Description UInt32 The value v with bit bit set to 1. WithBit(UInt64, Int32) Sets a bit in the value to 1. Declaration public static ulong WithBit(this ulong v, int bit) Parameters Type Name Description UInt64 v Int32 bit The position of the bit to set. Returns Type Description UInt64 The value v with bit bit set to 1. WithoutBit(Byte, Int32) Sets a bit in the value to 0. Declaration public static byte WithoutBit(this byte v, int bit) Parameters Type Name Description Byte v The initial value. Int32 bit The position of the bit to set. Returns Type Description Byte The value v with bit bit set to 0. WithoutBit(UInt16, Int32) Sets a bit in the value to 0. Declaration public static ushort WithoutBit(this ushort v, int bit) Parameters Type Name Description UInt16 v Int32 bit The position of the bit to set. Returns Type Description UInt16 The value v with bit bit set to 0. WithoutBit(UInt32, Int32) Sets a bit in the value to 0. Declaration public static uint WithoutBit(this uint v, int bit) Parameters Type Name Description UInt32 v Int32 bit The position of the bit to set. Returns Type Description UInt32 The value v with bit bit set to 0. WithoutBit(UInt64, Int32) Sets a bit in the value to 0. Declaration public static ulong WithoutBit(this ulong v, int bit) Parameters Type Name Description UInt64 v Int32 bit The position of the bit to set. Returns Type Description UInt64 The value v with bit bit set to 0."
  },
  "api/DoubleSharp.MathPlus.Solving.html": {
    "href": "api/DoubleSharp.MathPlus.Solving.html",
    "title": "Class Solving | DoubleSharp",
    "keywords": "Class Solving Provides methods for numerical root finding. Inheritance Object Solving Namespace : DoubleSharp.MathPlus Assembly : DoubleSharp.dll Syntax public static class Solving : Object Methods FindRoot(Func<Double, Double, Double, Double>, (Double, Double, Double), Nullable<(Double, Double, Double)>, Nullable<(Double, Double, Double)>, Double, Double, Double, Int32) Uses the BfgsMinimizer to find the root of a given function. Declaration public static (double, double, double) FindRoot(Func<double, double, double, double> func, (double, double, double) initialGuess, Nullable<(double, double, double)> lowerBound = null, Nullable<(double, double, double)> upperBound = null, double gradientTolerance = 1E-08, double parameterTolerance = 1E-08, double functionProgressTolerance = 1E-08, int maxIterations = 1000) Parameters Type Name Description Func < Double , Double , Double , Double > func (, , ) < Double , Double , Double > initialGuess Nullable < (, , ) < Double , Double , Double >> lowerBound Nullable < (, , ) < Double , Double , Double >> upperBound Double gradientTolerance The gradient tolerance. Double parameterTolerance The parameter tolerance. Double functionProgressTolerance The function progress tolerance. Int32 maxIterations The maximum number of iterations. Returns Type Description (, , ) < Double , Double , Double > The estimated input for a root. FindRoot(Func<Double, Double, Double>, (Double, Double), Nullable<(Double, Double)>, Nullable<(Double, Double)>, Double, Double, Double, Int32) Uses the BfgsMinimizer to find the root of a given function. Declaration public static (double, double) FindRoot(Func<double, double, double> func, (double, double) initialGuess, Nullable<(double, double)> lowerBound = null, Nullable<(double, double)> upperBound = null, double gradientTolerance = 1E-08, double parameterTolerance = 1E-08, double functionProgressTolerance = 1E-08, int maxIterations = 1000) Parameters Type Name Description Func < Double , Double , Double > func (, ) < Double , Double > initialGuess Nullable < (, ) < Double , Double >> lowerBound Nullable < (, ) < Double , Double >> upperBound Double gradientTolerance The gradient tolerance. Double parameterTolerance The parameter tolerance. Double functionProgressTolerance The function progress tolerance. Int32 maxIterations The maximum number of iterations. Returns Type Description (, ) < Double , Double > The estimated input for a root. FindRoot(Func<Double, Double>, Double, Double, Double, Double, Double, Double, Int32) Uses the BfgsMinimizer to find the root of a given function. Declaration public static double FindRoot(Func<double, double> func, double initialGuess, double lowerBound = -Infinity, double upperBound = Infinity, double gradientTolerance = 1E-08, double parameterTolerance = 1E-08, double functionProgressTolerance = 1E-08, int maxIterations = 1000) Parameters Type Name Description Func < Double , Double > func The function to minimize. Double initialGuess The initial guess for the parameter. Double lowerBound The lower parameter bound. Double upperBound The upper parameter bound. Double gradientTolerance The gradient tolerance. Double parameterTolerance The parameter tolerance. Double functionProgressTolerance The function progress tolerance. Int32 maxIterations The maximum number of iterations. Returns Type Description Double The estimated input for a root. SumOfSquares(Func<Double, Double, Double, (Double, Double, Double, Double)>, Nullable<(Double, Double, Double)>, Nullable<(Double, Double, Double, Double)>) Reduces multiple outputs from a function via the sum of squares method. Declaration public static Func<double, double, double, double> SumOfSquares(Func<double, double, double, (double, double, double, double)> func, Nullable<(double, double, double)> inputWeight = null, Nullable<(double, double, double, double)> outputWeight = null) Parameters Type Name Description Func < Double , Double , Double , (, , , ) < Double , Double , Double , Double >> func Nullable < (, , ) < Double , Double , Double >> inputWeight Nullable < (, , , ) < Double , Double , Double , Double >> outputWeight Returns Type Description Func < Double , Double , Double , Double > A function taking a single input and returning a single output. SumOfSquares(Func<Double, Double, Double, (Double, Double, Double)>, Nullable<(Double, Double, Double)>, Nullable<(Double, Double, Double)>) Reduces multiple outputs from a function via the sum of squares method. Declaration public static Func<double, double, double, double> SumOfSquares(Func<double, double, double, (double, double, double)> func, Nullable<(double, double, double)> inputWeight = null, Nullable<(double, double, double)> outputWeight = null) Parameters Type Name Description Func < Double , Double , Double , (, , ) < Double , Double , Double >> func Nullable < (, , ) < Double , Double , Double >> inputWeight Nullable < (, , ) < Double , Double , Double >> outputWeight Returns Type Description Func < Double , Double , Double , Double > A function taking a single input and returning a single output. SumOfSquares(Func<Double, Double, Double, (Double, Double)>, Nullable<(Double, Double, Double)>, Nullable<(Double, Double)>) Reduces multiple outputs from a function via the sum of squares method. Declaration public static Func<double, double, double, double> SumOfSquares(Func<double, double, double, (double, double)> func, Nullable<(double, double, double)> inputWeight = null, Nullable<(double, double)> outputWeight = null) Parameters Type Name Description Func < Double , Double , Double , (, ) < Double , Double >> func Nullable < (, , ) < Double , Double , Double >> inputWeight Nullable < (, ) < Double , Double >> outputWeight The weights to provide to the output(s). Returns Type Description Func < Double , Double , Double , Double > A function taking a single input and returning a single output. SumOfSquares(Func<Double, Double, (Double, Double, Double, Double)>, Nullable<(Double, Double)>, Nullable<(Double, Double, Double, Double)>) Reduces multiple outputs from a function via the sum of squares method. Declaration public static Func<double, double, double> SumOfSquares(Func<double, double, (double, double, double, double)> func, Nullable<(double, double)> inputWeight = null, Nullable<(double, double, double, double)> outputWeight = null) Parameters Type Name Description Func < Double , Double , (, , , ) < Double , Double , Double , Double >> func Nullable < (, ) < Double , Double >> inputWeight Nullable < (, , , ) < Double , Double , Double , Double >> outputWeight Returns Type Description Func < Double , Double , Double > A function taking a single input and returning a single output. SumOfSquares(Func<Double, Double, (Double, Double, Double)>, Nullable<(Double, Double)>, Nullable<(Double, Double, Double)>) Reduces multiple outputs from a function via the sum of squares method. Declaration public static Func<double, double, double> SumOfSquares(Func<double, double, (double, double, double)> func, Nullable<(double, double)> inputWeight = null, Nullable<(double, double, double)> outputWeight = null) Parameters Type Name Description Func < Double , Double , (, , ) < Double , Double , Double >> func Nullable < (, ) < Double , Double >> inputWeight Nullable < (, , ) < Double , Double , Double >> outputWeight Returns Type Description Func < Double , Double , Double > A function taking a single input and returning a single output. SumOfSquares(Func<Double, Double, (Double, Double)>, Nullable<(Double, Double)>, Nullable<(Double, Double)>) Reduces multiple outputs from a function via the sum of squares method. Declaration public static Func<double, double, double> SumOfSquares(Func<double, double, (double, double)> func, Nullable<(double, double)> inputWeight = null, Nullable<(double, double)> outputWeight = null) Parameters Type Name Description Func < Double , Double , (, ) < Double , Double >> func Nullable < (, ) < Double , Double >> inputWeight Nullable < (, ) < Double , Double >> outputWeight The weights to provide to the output(s). Returns Type Description Func < Double , Double , Double > A function taking a single input and returning a single output. SumOfSquares(Func<Double, (Double, Double, Double, Double)>, Double, Nullable<(Double, Double, Double, Double)>) Reduces multiple outputs from a function via the sum of squares method. Declaration public static Func<double, double> SumOfSquares(Func<double, (double, double, double, double)> func, double inputWeight = 1, Nullable<(double, double, double, double)> outputWeight = null) Parameters Type Name Description Func < Double , (, , , ) < Double , Double , Double , Double >> func Double inputWeight The weights to provide to the input(s). Nullable < (, , , ) < Double , Double , Double , Double >> outputWeight Returns Type Description Func < Double , Double > A function taking a single input and returning a single output. SumOfSquares(Func<Double, (Double, Double, Double)>, Double, Nullable<(Double, Double, Double)>) Reduces multiple outputs from a function via the sum of squares method. Declaration public static Func<double, double> SumOfSquares(Func<double, (double, double, double)> func, double inputWeight = 1, Nullable<(double, double, double)> outputWeight = null) Parameters Type Name Description Func < Double , (, , ) < Double , Double , Double >> func Double inputWeight The weights to provide to the input(s). Nullable < (, , ) < Double , Double , Double >> outputWeight Returns Type Description Func < Double , Double > A function taking a single input and returning a single output. SumOfSquares(Func<Double, (Double, Double)>, Double, Nullable<(Double, Double)>) Reduces multiple outputs from a function via the sum of squares method. Declaration public static Func<double, double> SumOfSquares(Func<double, (double, double)> func, double inputWeight = 1, Nullable<(double, double)> outputWeight = null) Parameters Type Name Description Func < Double , (, ) < Double , Double >> func The function to wrap. Double inputWeight The weights to provide to the input(s). Nullable < (, ) < Double , Double >> outputWeight The weights to provide to the output(s). Returns Type Description Func < Double , Double > A function taking a single input and returning a single output."
  },
  "api/DoubleSharp.MathPlus.SwizzleExtensions.html": {
    "href": "api/DoubleSharp.MathPlus.SwizzleExtensions.html",
    "title": "Class SwizzleExtensions | DoubleSharp",
    "keywords": "Class SwizzleExtensions Swizzle extension methods for System.Numerics.Vector2/3/4. Inheritance Object SwizzleExtensions Namespace : DoubleSharp.MathPlus Assembly : DoubleSharp.dll Syntax public static class SwizzleExtensions : Object Methods WW(Vector4) Constructs a new Vector2 with elements from vec : W, W. Declaration public static Vector2 WW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. WWW(Vector4) Constructs a new Vector3 with elements from vec : W, W, W. Declaration public static Vector3 WWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WWWW(Vector4) Constructs a new Vector4 with elements from vec : W, W, W, W. Declaration public static Vector4 WWWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWWX(Vector4) Constructs a new Vector4 with elements from vec : W, W, W, X. Declaration public static Vector4 WWWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWWY(Vector4) Constructs a new Vector4 with elements from vec : W, W, W, Y. Declaration public static Vector4 WWWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWWZ(Vector4) Constructs a new Vector4 with elements from vec : W, W, W, Z. Declaration public static Vector4 WWWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWX(Vector4) Constructs a new Vector3 with elements from vec : W, W, X. Declaration public static Vector3 WWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WWXW(Vector4) Constructs a new Vector4 with elements from vec : W, W, X, W. Declaration public static Vector4 WWXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWXX(Vector4) Constructs a new Vector4 with elements from vec : W, W, X, X. Declaration public static Vector4 WWXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWXY(Vector4) Constructs a new Vector4 with elements from vec : W, W, X, Y. Declaration public static Vector4 WWXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWXZ(Vector4) Constructs a new Vector4 with elements from vec : W, W, X, Z. Declaration public static Vector4 WWXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWY(Vector4) Constructs a new Vector3 with elements from vec : W, W, Y. Declaration public static Vector3 WWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WWYW(Vector4) Constructs a new Vector4 with elements from vec : W, W, Y, W. Declaration public static Vector4 WWYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWYX(Vector4) Constructs a new Vector4 with elements from vec : W, W, Y, X. Declaration public static Vector4 WWYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWYY(Vector4) Constructs a new Vector4 with elements from vec : W, W, Y, Y. Declaration public static Vector4 WWYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWYZ(Vector4) Constructs a new Vector4 with elements from vec : W, W, Y, Z. Declaration public static Vector4 WWYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWZ(Vector4) Constructs a new Vector3 with elements from vec : W, W, Z. Declaration public static Vector3 WWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WWZW(Vector4) Constructs a new Vector4 with elements from vec : W, W, Z, W. Declaration public static Vector4 WWZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWZX(Vector4) Constructs a new Vector4 with elements from vec : W, W, Z, X. Declaration public static Vector4 WWZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWZY(Vector4) Constructs a new Vector4 with elements from vec : W, W, Z, Y. Declaration public static Vector4 WWZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WWZZ(Vector4) Constructs a new Vector4 with elements from vec : W, W, Z, Z. Declaration public static Vector4 WWZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WX(Vector4) Constructs a new Vector2 with elements from vec : W, X. Declaration public static Vector2 WX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. WXW(Vector4) Constructs a new Vector3 with elements from vec : W, X, W. Declaration public static Vector3 WXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WXWW(Vector4) Constructs a new Vector4 with elements from vec : W, X, W, W. Declaration public static Vector4 WXWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXWX(Vector4) Constructs a new Vector4 with elements from vec : W, X, W, X. Declaration public static Vector4 WXWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXWY(Vector4) Constructs a new Vector4 with elements from vec : W, X, W, Y. Declaration public static Vector4 WXWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXWZ(Vector4) Constructs a new Vector4 with elements from vec : W, X, W, Z. Declaration public static Vector4 WXWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXX(Vector4) Constructs a new Vector3 with elements from vec : W, X, X. Declaration public static Vector3 WXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WXXW(Vector4) Constructs a new Vector4 with elements from vec : W, X, X, W. Declaration public static Vector4 WXXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXXX(Vector4) Constructs a new Vector4 with elements from vec : W, X, X, X. Declaration public static Vector4 WXXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXXY(Vector4) Constructs a new Vector4 with elements from vec : W, X, X, Y. Declaration public static Vector4 WXXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXXZ(Vector4) Constructs a new Vector4 with elements from vec : W, X, X, Z. Declaration public static Vector4 WXXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXY(Vector4) Constructs a new Vector3 with elements from vec : W, X, Y. Declaration public static Vector3 WXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WXYW(Vector4) Constructs a new Vector4 with elements from vec : W, X, Y, W. Declaration public static Vector4 WXYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXYX(Vector4) Constructs a new Vector4 with elements from vec : W, X, Y, X. Declaration public static Vector4 WXYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXYY(Vector4) Constructs a new Vector4 with elements from vec : W, X, Y, Y. Declaration public static Vector4 WXYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXYZ(Vector4) Constructs a new Vector4 with elements from vec : W, X, Y, Z. Declaration public static Vector4 WXYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXZ(Vector4) Constructs a new Vector3 with elements from vec : W, X, Z. Declaration public static Vector3 WXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WXZW(Vector4) Constructs a new Vector4 with elements from vec : W, X, Z, W. Declaration public static Vector4 WXZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXZX(Vector4) Constructs a new Vector4 with elements from vec : W, X, Z, X. Declaration public static Vector4 WXZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXZY(Vector4) Constructs a new Vector4 with elements from vec : W, X, Z, Y. Declaration public static Vector4 WXZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WXZZ(Vector4) Constructs a new Vector4 with elements from vec : W, X, Z, Z. Declaration public static Vector4 WXZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WY(Vector4) Constructs a new Vector2 with elements from vec : W, Y. Declaration public static Vector2 WY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. WYW(Vector4) Constructs a new Vector3 with elements from vec : W, Y, W. Declaration public static Vector3 WYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WYWW(Vector4) Constructs a new Vector4 with elements from vec : W, Y, W, W. Declaration public static Vector4 WYWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYWX(Vector4) Constructs a new Vector4 with elements from vec : W, Y, W, X. Declaration public static Vector4 WYWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYWY(Vector4) Constructs a new Vector4 with elements from vec : W, Y, W, Y. Declaration public static Vector4 WYWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYWZ(Vector4) Constructs a new Vector4 with elements from vec : W, Y, W, Z. Declaration public static Vector4 WYWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYX(Vector4) Constructs a new Vector3 with elements from vec : W, Y, X. Declaration public static Vector3 WYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WYXW(Vector4) Constructs a new Vector4 with elements from vec : W, Y, X, W. Declaration public static Vector4 WYXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYXX(Vector4) Constructs a new Vector4 with elements from vec : W, Y, X, X. Declaration public static Vector4 WYXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYXY(Vector4) Constructs a new Vector4 with elements from vec : W, Y, X, Y. Declaration public static Vector4 WYXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYXZ(Vector4) Constructs a new Vector4 with elements from vec : W, Y, X, Z. Declaration public static Vector4 WYXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYY(Vector4) Constructs a new Vector3 with elements from vec : W, Y, Y. Declaration public static Vector3 WYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WYYW(Vector4) Constructs a new Vector4 with elements from vec : W, Y, Y, W. Declaration public static Vector4 WYYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYYX(Vector4) Constructs a new Vector4 with elements from vec : W, Y, Y, X. Declaration public static Vector4 WYYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYYY(Vector4) Constructs a new Vector4 with elements from vec : W, Y, Y, Y. Declaration public static Vector4 WYYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYYZ(Vector4) Constructs a new Vector4 with elements from vec : W, Y, Y, Z. Declaration public static Vector4 WYYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYZ(Vector4) Constructs a new Vector3 with elements from vec : W, Y, Z. Declaration public static Vector3 WYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WYZW(Vector4) Constructs a new Vector4 with elements from vec : W, Y, Z, W. Declaration public static Vector4 WYZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYZX(Vector4) Constructs a new Vector4 with elements from vec : W, Y, Z, X. Declaration public static Vector4 WYZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYZY(Vector4) Constructs a new Vector4 with elements from vec : W, Y, Z, Y. Declaration public static Vector4 WYZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WYZZ(Vector4) Constructs a new Vector4 with elements from vec : W, Y, Z, Z. Declaration public static Vector4 WYZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZ(Vector4) Constructs a new Vector2 with elements from vec : W, Z. Declaration public static Vector2 WZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. WZW(Vector4) Constructs a new Vector3 with elements from vec : W, Z, W. Declaration public static Vector3 WZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WZWW(Vector4) Constructs a new Vector4 with elements from vec : W, Z, W, W. Declaration public static Vector4 WZWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZWX(Vector4) Constructs a new Vector4 with elements from vec : W, Z, W, X. Declaration public static Vector4 WZWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZWY(Vector4) Constructs a new Vector4 with elements from vec : W, Z, W, Y. Declaration public static Vector4 WZWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZWZ(Vector4) Constructs a new Vector4 with elements from vec : W, Z, W, Z. Declaration public static Vector4 WZWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZX(Vector4) Constructs a new Vector3 with elements from vec : W, Z, X. Declaration public static Vector3 WZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WZXW(Vector4) Constructs a new Vector4 with elements from vec : W, Z, X, W. Declaration public static Vector4 WZXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZXX(Vector4) Constructs a new Vector4 with elements from vec : W, Z, X, X. Declaration public static Vector4 WZXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZXY(Vector4) Constructs a new Vector4 with elements from vec : W, Z, X, Y. Declaration public static Vector4 WZXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZXZ(Vector4) Constructs a new Vector4 with elements from vec : W, Z, X, Z. Declaration public static Vector4 WZXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZY(Vector4) Constructs a new Vector3 with elements from vec : W, Z, Y. Declaration public static Vector3 WZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WZYW(Vector4) Constructs a new Vector4 with elements from vec : W, Z, Y, W. Declaration public static Vector4 WZYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZYX(Vector4) Constructs a new Vector4 with elements from vec : W, Z, Y, X. Declaration public static Vector4 WZYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZYY(Vector4) Constructs a new Vector4 with elements from vec : W, Z, Y, Y. Declaration public static Vector4 WZYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZYZ(Vector4) Constructs a new Vector4 with elements from vec : W, Z, Y, Z. Declaration public static Vector4 WZYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZZ(Vector4) Constructs a new Vector3 with elements from vec : W, Z, Z. Declaration public static Vector3 WZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. WZZW(Vector4) Constructs a new Vector4 with elements from vec : W, Z, Z, W. Declaration public static Vector4 WZZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZZX(Vector4) Constructs a new Vector4 with elements from vec : W, Z, Z, X. Declaration public static Vector4 WZZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZZY(Vector4) Constructs a new Vector4 with elements from vec : W, Z, Z, Y. Declaration public static Vector4 WZZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. WZZZ(Vector4) Constructs a new Vector4 with elements from vec : W, Z, Z, Z. Declaration public static Vector4 WZZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XW(Vector4) Constructs a new Vector2 with elements from vec : X, W. Declaration public static Vector2 XW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. XWW(Vector4) Constructs a new Vector3 with elements from vec : X, W, W. Declaration public static Vector3 XWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XWWW(Vector4) Constructs a new Vector4 with elements from vec : X, W, W, W. Declaration public static Vector4 XWWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWWX(Vector4) Constructs a new Vector4 with elements from vec : X, W, W, X. Declaration public static Vector4 XWWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWWY(Vector4) Constructs a new Vector4 with elements from vec : X, W, W, Y. Declaration public static Vector4 XWWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWWZ(Vector4) Constructs a new Vector4 with elements from vec : X, W, W, Z. Declaration public static Vector4 XWWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWX(Vector4) Constructs a new Vector3 with elements from vec : X, W, X. Declaration public static Vector3 XWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XWXW(Vector4) Constructs a new Vector4 with elements from vec : X, W, X, W. Declaration public static Vector4 XWXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWXX(Vector4) Constructs a new Vector4 with elements from vec : X, W, X, X. Declaration public static Vector4 XWXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWXY(Vector4) Constructs a new Vector4 with elements from vec : X, W, X, Y. Declaration public static Vector4 XWXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWXZ(Vector4) Constructs a new Vector4 with elements from vec : X, W, X, Z. Declaration public static Vector4 XWXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWY(Vector4) Constructs a new Vector3 with elements from vec : X, W, Y. Declaration public static Vector3 XWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XWYW(Vector4) Constructs a new Vector4 with elements from vec : X, W, Y, W. Declaration public static Vector4 XWYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWYX(Vector4) Constructs a new Vector4 with elements from vec : X, W, Y, X. Declaration public static Vector4 XWYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWYY(Vector4) Constructs a new Vector4 with elements from vec : X, W, Y, Y. Declaration public static Vector4 XWYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWYZ(Vector4) Constructs a new Vector4 with elements from vec : X, W, Y, Z. Declaration public static Vector4 XWYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWZ(Vector4) Constructs a new Vector3 with elements from vec : X, W, Z. Declaration public static Vector3 XWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XWZW(Vector4) Constructs a new Vector4 with elements from vec : X, W, Z, W. Declaration public static Vector4 XWZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWZX(Vector4) Constructs a new Vector4 with elements from vec : X, W, Z, X. Declaration public static Vector4 XWZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWZY(Vector4) Constructs a new Vector4 with elements from vec : X, W, Z, Y. Declaration public static Vector4 XWZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XWZZ(Vector4) Constructs a new Vector4 with elements from vec : X, W, Z, Z. Declaration public static Vector4 XWZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XX(Vector2D) Constructs a new Vector2D with elements from vec : X, X. Declaration public static Vector2D XX(this Vector2D vec) Parameters Type Name Description Vector2D vec The vector from which to take values. Returns Type Description Vector2D The new vector. XX(Vector2) Constructs a new Vector2 with elements from vec : X, X. Declaration public static Vector2 XX(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector2 The new vector. XX(Vector3) Constructs a new Vector2 with elements from vec : X, X. Declaration public static Vector2 XX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector2 The new vector. XX(Vector4) Constructs a new Vector2 with elements from vec : X, X. Declaration public static Vector2 XX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. XXW(Vector4) Constructs a new Vector3 with elements from vec : X, X, W. Declaration public static Vector3 XXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XXWW(Vector4) Constructs a new Vector4 with elements from vec : X, X, W, W. Declaration public static Vector4 XXWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXWX(Vector4) Constructs a new Vector4 with elements from vec : X, X, W, X. Declaration public static Vector4 XXWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXWY(Vector4) Constructs a new Vector4 with elements from vec : X, X, W, Y. Declaration public static Vector4 XXWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXWZ(Vector4) Constructs a new Vector4 with elements from vec : X, X, W, Z. Declaration public static Vector4 XXWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXX(Vector2) Constructs a new Vector3 with elements from vec : X, X, X. Declaration public static Vector3 XXX(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XXX(Vector3) Constructs a new Vector3 with elements from vec : X, X, X. Declaration public static Vector3 XXX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XXX(Vector4) Constructs a new Vector3 with elements from vec : X, X, X. Declaration public static Vector3 XXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XXXW(Vector4) Constructs a new Vector4 with elements from vec : X, X, X, W. Declaration public static Vector4 XXXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXXX(Vector2) Constructs a new Vector4 with elements from vec : X, X, X, X. Declaration public static Vector4 XXXX(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXXX(Vector3) Constructs a new Vector4 with elements from vec : X, X, X, X. Declaration public static Vector4 XXXX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXXX(Vector4) Constructs a new Vector4 with elements from vec : X, X, X, X. Declaration public static Vector4 XXXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXXY(Vector2) Constructs a new Vector4 with elements from vec : X, X, X, Y. Declaration public static Vector4 XXXY(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXXY(Vector3) Constructs a new Vector4 with elements from vec : X, X, X, Y. Declaration public static Vector4 XXXY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXXY(Vector4) Constructs a new Vector4 with elements from vec : X, X, X, Y. Declaration public static Vector4 XXXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXXZ(Vector3) Constructs a new Vector4 with elements from vec : X, X, X, Z. Declaration public static Vector4 XXXZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXXZ(Vector4) Constructs a new Vector4 with elements from vec : X, X, X, Z. Declaration public static Vector4 XXXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXY(Vector2) Constructs a new Vector3 with elements from vec : X, X, Y. Declaration public static Vector3 XXY(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XXY(Vector3) Constructs a new Vector3 with elements from vec : X, X, Y. Declaration public static Vector3 XXY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XXY(Vector4) Constructs a new Vector3 with elements from vec : X, X, Y. Declaration public static Vector3 XXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XXYW(Vector4) Constructs a new Vector4 with elements from vec : X, X, Y, W. Declaration public static Vector4 XXYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXYX(Vector2) Constructs a new Vector4 with elements from vec : X, X, Y, X. Declaration public static Vector4 XXYX(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXYX(Vector3) Constructs a new Vector4 with elements from vec : X, X, Y, X. Declaration public static Vector4 XXYX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXYX(Vector4) Constructs a new Vector4 with elements from vec : X, X, Y, X. Declaration public static Vector4 XXYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXYY(Vector2) Constructs a new Vector4 with elements from vec : X, X, Y, Y. Declaration public static Vector4 XXYY(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXYY(Vector3) Constructs a new Vector4 with elements from vec : X, X, Y, Y. Declaration public static Vector4 XXYY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXYY(Vector4) Constructs a new Vector4 with elements from vec : X, X, Y, Y. Declaration public static Vector4 XXYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXYZ(Vector3) Constructs a new Vector4 with elements from vec : X, X, Y, Z. Declaration public static Vector4 XXYZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXYZ(Vector4) Constructs a new Vector4 with elements from vec : X, X, Y, Z. Declaration public static Vector4 XXYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXZ(Vector3) Constructs a new Vector3 with elements from vec : X, X, Z. Declaration public static Vector3 XXZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XXZ(Vector4) Constructs a new Vector3 with elements from vec : X, X, Z. Declaration public static Vector3 XXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XXZW(Vector4) Constructs a new Vector4 with elements from vec : X, X, Z, W. Declaration public static Vector4 XXZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXZX(Vector3) Constructs a new Vector4 with elements from vec : X, X, Z, X. Declaration public static Vector4 XXZX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXZX(Vector4) Constructs a new Vector4 with elements from vec : X, X, Z, X. Declaration public static Vector4 XXZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXZY(Vector3) Constructs a new Vector4 with elements from vec : X, X, Z, Y. Declaration public static Vector4 XXZY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXZY(Vector4) Constructs a new Vector4 with elements from vec : X, X, Z, Y. Declaration public static Vector4 XXZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXZZ(Vector3) Constructs a new Vector4 with elements from vec : X, X, Z, Z. Declaration public static Vector4 XXZZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XXZZ(Vector4) Constructs a new Vector4 with elements from vec : X, X, Z, Z. Declaration public static Vector4 XXZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XY(Vector2D) Constructs a new Vector2D with elements from vec : X, Y. Declaration public static Vector2D XY(this Vector2D vec) Parameters Type Name Description Vector2D vec The vector from which to take values. Returns Type Description Vector2D The new vector. XY(Vector2) Constructs a new Vector2 with elements from vec : X, Y. Declaration public static Vector2 XY(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector2 The new vector. XY(Vector3) Constructs a new Vector2 with elements from vec : X, Y. Declaration public static Vector2 XY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector2 The new vector. XY(Vector4) Constructs a new Vector2 with elements from vec : X, Y. Declaration public static Vector2 XY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. XYW(Vector4) Constructs a new Vector3 with elements from vec : X, Y, W. Declaration public static Vector3 XYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XYWW(Vector4) Constructs a new Vector4 with elements from vec : X, Y, W, W. Declaration public static Vector4 XYWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYWX(Vector4) Constructs a new Vector4 with elements from vec : X, Y, W, X. Declaration public static Vector4 XYWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYWY(Vector4) Constructs a new Vector4 with elements from vec : X, Y, W, Y. Declaration public static Vector4 XYWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYWZ(Vector4) Constructs a new Vector4 with elements from vec : X, Y, W, Z. Declaration public static Vector4 XYWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYX(Vector2) Constructs a new Vector3 with elements from vec : X, Y, X. Declaration public static Vector3 XYX(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XYX(Vector3) Constructs a new Vector3 with elements from vec : X, Y, X. Declaration public static Vector3 XYX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XYX(Vector4) Constructs a new Vector3 with elements from vec : X, Y, X. Declaration public static Vector3 XYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XYXW(Vector4) Constructs a new Vector4 with elements from vec : X, Y, X, W. Declaration public static Vector4 XYXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYXX(Vector2) Constructs a new Vector4 with elements from vec : X, Y, X, X. Declaration public static Vector4 XYXX(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYXX(Vector3) Constructs a new Vector4 with elements from vec : X, Y, X, X. Declaration public static Vector4 XYXX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYXX(Vector4) Constructs a new Vector4 with elements from vec : X, Y, X, X. Declaration public static Vector4 XYXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYXY(Vector2) Constructs a new Vector4 with elements from vec : X, Y, X, Y. Declaration public static Vector4 XYXY(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYXY(Vector3) Constructs a new Vector4 with elements from vec : X, Y, X, Y. Declaration public static Vector4 XYXY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYXY(Vector4) Constructs a new Vector4 with elements from vec : X, Y, X, Y. Declaration public static Vector4 XYXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYXZ(Vector3) Constructs a new Vector4 with elements from vec : X, Y, X, Z. Declaration public static Vector4 XYXZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYXZ(Vector4) Constructs a new Vector4 with elements from vec : X, Y, X, Z. Declaration public static Vector4 XYXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYY(Vector2) Constructs a new Vector3 with elements from vec : X, Y, Y. Declaration public static Vector3 XYY(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XYY(Vector3) Constructs a new Vector3 with elements from vec : X, Y, Y. Declaration public static Vector3 XYY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XYY(Vector4) Constructs a new Vector3 with elements from vec : X, Y, Y. Declaration public static Vector3 XYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XYYW(Vector4) Constructs a new Vector4 with elements from vec : X, Y, Y, W. Declaration public static Vector4 XYYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYYX(Vector2) Constructs a new Vector4 with elements from vec : X, Y, Y, X. Declaration public static Vector4 XYYX(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYYX(Vector3) Constructs a new Vector4 with elements from vec : X, Y, Y, X. Declaration public static Vector4 XYYX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYYX(Vector4) Constructs a new Vector4 with elements from vec : X, Y, Y, X. Declaration public static Vector4 XYYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYYY(Vector2) Constructs a new Vector4 with elements from vec : X, Y, Y, Y. Declaration public static Vector4 XYYY(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYYY(Vector3) Constructs a new Vector4 with elements from vec : X, Y, Y, Y. Declaration public static Vector4 XYYY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYYY(Vector4) Constructs a new Vector4 with elements from vec : X, Y, Y, Y. Declaration public static Vector4 XYYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYYZ(Vector3) Constructs a new Vector4 with elements from vec : X, Y, Y, Z. Declaration public static Vector4 XYYZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYYZ(Vector4) Constructs a new Vector4 with elements from vec : X, Y, Y, Z. Declaration public static Vector4 XYYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYZ(Vector3) Constructs a new Vector3 with elements from vec : X, Y, Z. Declaration public static Vector3 XYZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XYZ(Vector4) Constructs a new Vector3 with elements from vec : X, Y, Z. Declaration public static Vector3 XYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XYZW(Vector4) Constructs a new Vector4 with elements from vec : X, Y, Z, W. Declaration public static Vector4 XYZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYZX(Vector3) Constructs a new Vector4 with elements from vec : X, Y, Z, X. Declaration public static Vector4 XYZX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYZX(Vector4) Constructs a new Vector4 with elements from vec : X, Y, Z, X. Declaration public static Vector4 XYZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYZY(Vector3) Constructs a new Vector4 with elements from vec : X, Y, Z, Y. Declaration public static Vector4 XYZY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYZY(Vector4) Constructs a new Vector4 with elements from vec : X, Y, Z, Y. Declaration public static Vector4 XYZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYZZ(Vector3) Constructs a new Vector4 with elements from vec : X, Y, Z, Z. Declaration public static Vector4 XYZZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XYZZ(Vector4) Constructs a new Vector4 with elements from vec : X, Y, Z, Z. Declaration public static Vector4 XYZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZ(Vector3) Constructs a new Vector2 with elements from vec : X, Z. Declaration public static Vector2 XZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector2 The new vector. XZ(Vector4) Constructs a new Vector2 with elements from vec : X, Z. Declaration public static Vector2 XZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. XZW(Vector4) Constructs a new Vector3 with elements from vec : X, Z, W. Declaration public static Vector3 XZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XZWW(Vector4) Constructs a new Vector4 with elements from vec : X, Z, W, W. Declaration public static Vector4 XZWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZWX(Vector4) Constructs a new Vector4 with elements from vec : X, Z, W, X. Declaration public static Vector4 XZWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZWY(Vector4) Constructs a new Vector4 with elements from vec : X, Z, W, Y. Declaration public static Vector4 XZWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZWZ(Vector4) Constructs a new Vector4 with elements from vec : X, Z, W, Z. Declaration public static Vector4 XZWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZX(Vector3) Constructs a new Vector3 with elements from vec : X, Z, X. Declaration public static Vector3 XZX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XZX(Vector4) Constructs a new Vector3 with elements from vec : X, Z, X. Declaration public static Vector3 XZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XZXW(Vector4) Constructs a new Vector4 with elements from vec : X, Z, X, W. Declaration public static Vector4 XZXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZXX(Vector3) Constructs a new Vector4 with elements from vec : X, Z, X, X. Declaration public static Vector4 XZXX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZXX(Vector4) Constructs a new Vector4 with elements from vec : X, Z, X, X. Declaration public static Vector4 XZXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZXY(Vector3) Constructs a new Vector4 with elements from vec : X, Z, X, Y. Declaration public static Vector4 XZXY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZXY(Vector4) Constructs a new Vector4 with elements from vec : X, Z, X, Y. Declaration public static Vector4 XZXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZXZ(Vector3) Constructs a new Vector4 with elements from vec : X, Z, X, Z. Declaration public static Vector4 XZXZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZXZ(Vector4) Constructs a new Vector4 with elements from vec : X, Z, X, Z. Declaration public static Vector4 XZXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZY(Vector3) Constructs a new Vector3 with elements from vec : X, Z, Y. Declaration public static Vector3 XZY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XZY(Vector4) Constructs a new Vector3 with elements from vec : X, Z, Y. Declaration public static Vector3 XZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XZYW(Vector4) Constructs a new Vector4 with elements from vec : X, Z, Y, W. Declaration public static Vector4 XZYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZYX(Vector3) Constructs a new Vector4 with elements from vec : X, Z, Y, X. Declaration public static Vector4 XZYX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZYX(Vector4) Constructs a new Vector4 with elements from vec : X, Z, Y, X. Declaration public static Vector4 XZYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZYY(Vector3) Constructs a new Vector4 with elements from vec : X, Z, Y, Y. Declaration public static Vector4 XZYY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZYY(Vector4) Constructs a new Vector4 with elements from vec : X, Z, Y, Y. Declaration public static Vector4 XZYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZYZ(Vector3) Constructs a new Vector4 with elements from vec : X, Z, Y, Z. Declaration public static Vector4 XZYZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZYZ(Vector4) Constructs a new Vector4 with elements from vec : X, Z, Y, Z. Declaration public static Vector4 XZYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZZ(Vector3) Constructs a new Vector3 with elements from vec : X, Z, Z. Declaration public static Vector3 XZZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XZZ(Vector4) Constructs a new Vector3 with elements from vec : X, Z, Z. Declaration public static Vector3 XZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. XZZW(Vector4) Constructs a new Vector4 with elements from vec : X, Z, Z, W. Declaration public static Vector4 XZZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZZX(Vector3) Constructs a new Vector4 with elements from vec : X, Z, Z, X. Declaration public static Vector4 XZZX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZZX(Vector4) Constructs a new Vector4 with elements from vec : X, Z, Z, X. Declaration public static Vector4 XZZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZZY(Vector3) Constructs a new Vector4 with elements from vec : X, Z, Z, Y. Declaration public static Vector4 XZZY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZZY(Vector4) Constructs a new Vector4 with elements from vec : X, Z, Z, Y. Declaration public static Vector4 XZZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZZZ(Vector3) Constructs a new Vector4 with elements from vec : X, Z, Z, Z. Declaration public static Vector4 XZZZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. XZZZ(Vector4) Constructs a new Vector4 with elements from vec : X, Z, Z, Z. Declaration public static Vector4 XZZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YW(Vector4) Constructs a new Vector2 with elements from vec : Y, W. Declaration public static Vector2 YW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. YWW(Vector4) Constructs a new Vector3 with elements from vec : Y, W, W. Declaration public static Vector3 YWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YWWW(Vector4) Constructs a new Vector4 with elements from vec : Y, W, W, W. Declaration public static Vector4 YWWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWWX(Vector4) Constructs a new Vector4 with elements from vec : Y, W, W, X. Declaration public static Vector4 YWWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWWY(Vector4) Constructs a new Vector4 with elements from vec : Y, W, W, Y. Declaration public static Vector4 YWWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWWZ(Vector4) Constructs a new Vector4 with elements from vec : Y, W, W, Z. Declaration public static Vector4 YWWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWX(Vector4) Constructs a new Vector3 with elements from vec : Y, W, X. Declaration public static Vector3 YWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YWXW(Vector4) Constructs a new Vector4 with elements from vec : Y, W, X, W. Declaration public static Vector4 YWXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWXX(Vector4) Constructs a new Vector4 with elements from vec : Y, W, X, X. Declaration public static Vector4 YWXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWXY(Vector4) Constructs a new Vector4 with elements from vec : Y, W, X, Y. Declaration public static Vector4 YWXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWXZ(Vector4) Constructs a new Vector4 with elements from vec : Y, W, X, Z. Declaration public static Vector4 YWXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWY(Vector4) Constructs a new Vector3 with elements from vec : Y, W, Y. Declaration public static Vector3 YWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YWYW(Vector4) Constructs a new Vector4 with elements from vec : Y, W, Y, W. Declaration public static Vector4 YWYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWYX(Vector4) Constructs a new Vector4 with elements from vec : Y, W, Y, X. Declaration public static Vector4 YWYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWYY(Vector4) Constructs a new Vector4 with elements from vec : Y, W, Y, Y. Declaration public static Vector4 YWYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWYZ(Vector4) Constructs a new Vector4 with elements from vec : Y, W, Y, Z. Declaration public static Vector4 YWYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWZ(Vector4) Constructs a new Vector3 with elements from vec : Y, W, Z. Declaration public static Vector3 YWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YWZW(Vector4) Constructs a new Vector4 with elements from vec : Y, W, Z, W. Declaration public static Vector4 YWZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWZX(Vector4) Constructs a new Vector4 with elements from vec : Y, W, Z, X. Declaration public static Vector4 YWZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWZY(Vector4) Constructs a new Vector4 with elements from vec : Y, W, Z, Y. Declaration public static Vector4 YWZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YWZZ(Vector4) Constructs a new Vector4 with elements from vec : Y, W, Z, Z. Declaration public static Vector4 YWZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YX(Vector2D) Constructs a new Vector2D with elements from vec : Y, X. Declaration public static Vector2D YX(this Vector2D vec) Parameters Type Name Description Vector2D vec The vector from which to take values. Returns Type Description Vector2D The new vector. YX(Vector2) Constructs a new Vector2 with elements from vec : Y, X. Declaration public static Vector2 YX(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector2 The new vector. YX(Vector3) Constructs a new Vector2 with elements from vec : Y, X. Declaration public static Vector2 YX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector2 The new vector. YX(Vector4) Constructs a new Vector2 with elements from vec : Y, X. Declaration public static Vector2 YX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. YXW(Vector4) Constructs a new Vector3 with elements from vec : Y, X, W. Declaration public static Vector3 YXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YXWW(Vector4) Constructs a new Vector4 with elements from vec : Y, X, W, W. Declaration public static Vector4 YXWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXWX(Vector4) Constructs a new Vector4 with elements from vec : Y, X, W, X. Declaration public static Vector4 YXWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXWY(Vector4) Constructs a new Vector4 with elements from vec : Y, X, W, Y. Declaration public static Vector4 YXWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXWZ(Vector4) Constructs a new Vector4 with elements from vec : Y, X, W, Z. Declaration public static Vector4 YXWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXX(Vector2) Constructs a new Vector3 with elements from vec : Y, X, X. Declaration public static Vector3 YXX(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YXX(Vector3) Constructs a new Vector3 with elements from vec : Y, X, X. Declaration public static Vector3 YXX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YXX(Vector4) Constructs a new Vector3 with elements from vec : Y, X, X. Declaration public static Vector3 YXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YXXW(Vector4) Constructs a new Vector4 with elements from vec : Y, X, X, W. Declaration public static Vector4 YXXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXXX(Vector2) Constructs a new Vector4 with elements from vec : Y, X, X, X. Declaration public static Vector4 YXXX(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXXX(Vector3) Constructs a new Vector4 with elements from vec : Y, X, X, X. Declaration public static Vector4 YXXX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXXX(Vector4) Constructs a new Vector4 with elements from vec : Y, X, X, X. Declaration public static Vector4 YXXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXXY(Vector2) Constructs a new Vector4 with elements from vec : Y, X, X, Y. Declaration public static Vector4 YXXY(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXXY(Vector3) Constructs a new Vector4 with elements from vec : Y, X, X, Y. Declaration public static Vector4 YXXY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXXY(Vector4) Constructs a new Vector4 with elements from vec : Y, X, X, Y. Declaration public static Vector4 YXXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXXZ(Vector3) Constructs a new Vector4 with elements from vec : Y, X, X, Z. Declaration public static Vector4 YXXZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXXZ(Vector4) Constructs a new Vector4 with elements from vec : Y, X, X, Z. Declaration public static Vector4 YXXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXY(Vector2) Constructs a new Vector3 with elements from vec : Y, X, Y. Declaration public static Vector3 YXY(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YXY(Vector3) Constructs a new Vector3 with elements from vec : Y, X, Y. Declaration public static Vector3 YXY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YXY(Vector4) Constructs a new Vector3 with elements from vec : Y, X, Y. Declaration public static Vector3 YXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YXYW(Vector4) Constructs a new Vector4 with elements from vec : Y, X, Y, W. Declaration public static Vector4 YXYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXYX(Vector2) Constructs a new Vector4 with elements from vec : Y, X, Y, X. Declaration public static Vector4 YXYX(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXYX(Vector3) Constructs a new Vector4 with elements from vec : Y, X, Y, X. Declaration public static Vector4 YXYX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXYX(Vector4) Constructs a new Vector4 with elements from vec : Y, X, Y, X. Declaration public static Vector4 YXYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXYY(Vector2) Constructs a new Vector4 with elements from vec : Y, X, Y, Y. Declaration public static Vector4 YXYY(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXYY(Vector3) Constructs a new Vector4 with elements from vec : Y, X, Y, Y. Declaration public static Vector4 YXYY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXYY(Vector4) Constructs a new Vector4 with elements from vec : Y, X, Y, Y. Declaration public static Vector4 YXYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXYZ(Vector3) Constructs a new Vector4 with elements from vec : Y, X, Y, Z. Declaration public static Vector4 YXYZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXYZ(Vector4) Constructs a new Vector4 with elements from vec : Y, X, Y, Z. Declaration public static Vector4 YXYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXZ(Vector3) Constructs a new Vector3 with elements from vec : Y, X, Z. Declaration public static Vector3 YXZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YXZ(Vector4) Constructs a new Vector3 with elements from vec : Y, X, Z. Declaration public static Vector3 YXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YXZW(Vector4) Constructs a new Vector4 with elements from vec : Y, X, Z, W. Declaration public static Vector4 YXZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXZX(Vector3) Constructs a new Vector4 with elements from vec : Y, X, Z, X. Declaration public static Vector4 YXZX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXZX(Vector4) Constructs a new Vector4 with elements from vec : Y, X, Z, X. Declaration public static Vector4 YXZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXZY(Vector3) Constructs a new Vector4 with elements from vec : Y, X, Z, Y. Declaration public static Vector4 YXZY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXZY(Vector4) Constructs a new Vector4 with elements from vec : Y, X, Z, Y. Declaration public static Vector4 YXZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXZZ(Vector3) Constructs a new Vector4 with elements from vec : Y, X, Z, Z. Declaration public static Vector4 YXZZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YXZZ(Vector4) Constructs a new Vector4 with elements from vec : Y, X, Z, Z. Declaration public static Vector4 YXZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YY(Vector2D) Constructs a new Vector2D with elements from vec : Y, Y. Declaration public static Vector2D YY(this Vector2D vec) Parameters Type Name Description Vector2D vec The vector from which to take values. Returns Type Description Vector2D The new vector. YY(Vector2) Constructs a new Vector2 with elements from vec : Y, Y. Declaration public static Vector2 YY(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector2 The new vector. YY(Vector3) Constructs a new Vector2 with elements from vec : Y, Y. Declaration public static Vector2 YY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector2 The new vector. YY(Vector4) Constructs a new Vector2 with elements from vec : Y, Y. Declaration public static Vector2 YY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. YYW(Vector4) Constructs a new Vector3 with elements from vec : Y, Y, W. Declaration public static Vector3 YYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YYWW(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, W, W. Declaration public static Vector4 YYWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYWX(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, W, X. Declaration public static Vector4 YYWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYWY(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, W, Y. Declaration public static Vector4 YYWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYWZ(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, W, Z. Declaration public static Vector4 YYWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYX(Vector2) Constructs a new Vector3 with elements from vec : Y, Y, X. Declaration public static Vector3 YYX(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YYX(Vector3) Constructs a new Vector3 with elements from vec : Y, Y, X. Declaration public static Vector3 YYX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YYX(Vector4) Constructs a new Vector3 with elements from vec : Y, Y, X. Declaration public static Vector3 YYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YYXW(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, X, W. Declaration public static Vector4 YYXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYXX(Vector2) Constructs a new Vector4 with elements from vec : Y, Y, X, X. Declaration public static Vector4 YYXX(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYXX(Vector3) Constructs a new Vector4 with elements from vec : Y, Y, X, X. Declaration public static Vector4 YYXX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYXX(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, X, X. Declaration public static Vector4 YYXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYXY(Vector2) Constructs a new Vector4 with elements from vec : Y, Y, X, Y. Declaration public static Vector4 YYXY(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYXY(Vector3) Constructs a new Vector4 with elements from vec : Y, Y, X, Y. Declaration public static Vector4 YYXY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYXY(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, X, Y. Declaration public static Vector4 YYXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYXZ(Vector3) Constructs a new Vector4 with elements from vec : Y, Y, X, Z. Declaration public static Vector4 YYXZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYXZ(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, X, Z. Declaration public static Vector4 YYXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYY(Vector2) Constructs a new Vector3 with elements from vec : Y, Y, Y. Declaration public static Vector3 YYY(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YYY(Vector3) Constructs a new Vector3 with elements from vec : Y, Y, Y. Declaration public static Vector3 YYY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YYY(Vector4) Constructs a new Vector3 with elements from vec : Y, Y, Y. Declaration public static Vector3 YYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YYYW(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, Y, W. Declaration public static Vector4 YYYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYYX(Vector2) Constructs a new Vector4 with elements from vec : Y, Y, Y, X. Declaration public static Vector4 YYYX(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYYX(Vector3) Constructs a new Vector4 with elements from vec : Y, Y, Y, X. Declaration public static Vector4 YYYX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYYX(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, Y, X. Declaration public static Vector4 YYYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYYY(Vector2) Constructs a new Vector4 with elements from vec : Y, Y, Y, Y. Declaration public static Vector4 YYYY(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYYY(Vector3) Constructs a new Vector4 with elements from vec : Y, Y, Y, Y. Declaration public static Vector4 YYYY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYYY(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, Y, Y. Declaration public static Vector4 YYYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYYZ(Vector3) Constructs a new Vector4 with elements from vec : Y, Y, Y, Z. Declaration public static Vector4 YYYZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYYZ(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, Y, Z. Declaration public static Vector4 YYYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYZ(Vector3) Constructs a new Vector3 with elements from vec : Y, Y, Z. Declaration public static Vector3 YYZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YYZ(Vector4) Constructs a new Vector3 with elements from vec : Y, Y, Z. Declaration public static Vector3 YYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YYZW(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, Z, W. Declaration public static Vector4 YYZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYZX(Vector3) Constructs a new Vector4 with elements from vec : Y, Y, Z, X. Declaration public static Vector4 YYZX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYZX(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, Z, X. Declaration public static Vector4 YYZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYZY(Vector3) Constructs a new Vector4 with elements from vec : Y, Y, Z, Y. Declaration public static Vector4 YYZY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYZY(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, Z, Y. Declaration public static Vector4 YYZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYZZ(Vector3) Constructs a new Vector4 with elements from vec : Y, Y, Z, Z. Declaration public static Vector4 YYZZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YYZZ(Vector4) Constructs a new Vector4 with elements from vec : Y, Y, Z, Z. Declaration public static Vector4 YYZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZ(Vector3) Constructs a new Vector2 with elements from vec : Y, Z. Declaration public static Vector2 YZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector2 The new vector. YZ(Vector4) Constructs a new Vector2 with elements from vec : Y, Z. Declaration public static Vector2 YZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. YZW(Vector4) Constructs a new Vector3 with elements from vec : Y, Z, W. Declaration public static Vector3 YZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YZWW(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, W, W. Declaration public static Vector4 YZWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZWX(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, W, X. Declaration public static Vector4 YZWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZWY(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, W, Y. Declaration public static Vector4 YZWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZWZ(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, W, Z. Declaration public static Vector4 YZWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZX(Vector3) Constructs a new Vector3 with elements from vec : Y, Z, X. Declaration public static Vector3 YZX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YZX(Vector4) Constructs a new Vector3 with elements from vec : Y, Z, X. Declaration public static Vector3 YZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YZXW(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, X, W. Declaration public static Vector4 YZXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZXX(Vector3) Constructs a new Vector4 with elements from vec : Y, Z, X, X. Declaration public static Vector4 YZXX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZXX(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, X, X. Declaration public static Vector4 YZXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZXY(Vector3) Constructs a new Vector4 with elements from vec : Y, Z, X, Y. Declaration public static Vector4 YZXY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZXY(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, X, Y. Declaration public static Vector4 YZXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZXZ(Vector3) Constructs a new Vector4 with elements from vec : Y, Z, X, Z. Declaration public static Vector4 YZXZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZXZ(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, X, Z. Declaration public static Vector4 YZXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZY(Vector3) Constructs a new Vector3 with elements from vec : Y, Z, Y. Declaration public static Vector3 YZY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YZY(Vector4) Constructs a new Vector3 with elements from vec : Y, Z, Y. Declaration public static Vector3 YZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YZYW(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, Y, W. Declaration public static Vector4 YZYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZYX(Vector3) Constructs a new Vector4 with elements from vec : Y, Z, Y, X. Declaration public static Vector4 YZYX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZYX(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, Y, X. Declaration public static Vector4 YZYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZYY(Vector3) Constructs a new Vector4 with elements from vec : Y, Z, Y, Y. Declaration public static Vector4 YZYY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZYY(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, Y, Y. Declaration public static Vector4 YZYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZYZ(Vector3) Constructs a new Vector4 with elements from vec : Y, Z, Y, Z. Declaration public static Vector4 YZYZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZYZ(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, Y, Z. Declaration public static Vector4 YZYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZZ(Vector3) Constructs a new Vector3 with elements from vec : Y, Z, Z. Declaration public static Vector3 YZZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YZZ(Vector4) Constructs a new Vector3 with elements from vec : Y, Z, Z. Declaration public static Vector3 YZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. YZZW(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, Z, W. Declaration public static Vector4 YZZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZZX(Vector3) Constructs a new Vector4 with elements from vec : Y, Z, Z, X. Declaration public static Vector4 YZZX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZZX(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, Z, X. Declaration public static Vector4 YZZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZZY(Vector3) Constructs a new Vector4 with elements from vec : Y, Z, Z, Y. Declaration public static Vector4 YZZY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZZY(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, Z, Y. Declaration public static Vector4 YZZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZZZ(Vector3) Constructs a new Vector4 with elements from vec : Y, Z, Z, Z. Declaration public static Vector4 YZZZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. YZZZ(Vector4) Constructs a new Vector4 with elements from vec : Y, Z, Z, Z. Declaration public static Vector4 YZZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZW(Vector4) Constructs a new Vector2 with elements from vec : Z, W. Declaration public static Vector2 ZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. ZWW(Vector4) Constructs a new Vector3 with elements from vec : Z, W, W. Declaration public static Vector3 ZWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZWWW(Vector4) Constructs a new Vector4 with elements from vec : Z, W, W, W. Declaration public static Vector4 ZWWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWWX(Vector4) Constructs a new Vector4 with elements from vec : Z, W, W, X. Declaration public static Vector4 ZWWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWWY(Vector4) Constructs a new Vector4 with elements from vec : Z, W, W, Y. Declaration public static Vector4 ZWWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWWZ(Vector4) Constructs a new Vector4 with elements from vec : Z, W, W, Z. Declaration public static Vector4 ZWWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWX(Vector4) Constructs a new Vector3 with elements from vec : Z, W, X. Declaration public static Vector3 ZWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZWXW(Vector4) Constructs a new Vector4 with elements from vec : Z, W, X, W. Declaration public static Vector4 ZWXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWXX(Vector4) Constructs a new Vector4 with elements from vec : Z, W, X, X. Declaration public static Vector4 ZWXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWXY(Vector4) Constructs a new Vector4 with elements from vec : Z, W, X, Y. Declaration public static Vector4 ZWXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWXZ(Vector4) Constructs a new Vector4 with elements from vec : Z, W, X, Z. Declaration public static Vector4 ZWXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWY(Vector4) Constructs a new Vector3 with elements from vec : Z, W, Y. Declaration public static Vector3 ZWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZWYW(Vector4) Constructs a new Vector4 with elements from vec : Z, W, Y, W. Declaration public static Vector4 ZWYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWYX(Vector4) Constructs a new Vector4 with elements from vec : Z, W, Y, X. Declaration public static Vector4 ZWYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWYY(Vector4) Constructs a new Vector4 with elements from vec : Z, W, Y, Y. Declaration public static Vector4 ZWYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWYZ(Vector4) Constructs a new Vector4 with elements from vec : Z, W, Y, Z. Declaration public static Vector4 ZWYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWZ(Vector4) Constructs a new Vector3 with elements from vec : Z, W, Z. Declaration public static Vector3 ZWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZWZW(Vector4) Constructs a new Vector4 with elements from vec : Z, W, Z, W. Declaration public static Vector4 ZWZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWZX(Vector4) Constructs a new Vector4 with elements from vec : Z, W, Z, X. Declaration public static Vector4 ZWZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWZY(Vector4) Constructs a new Vector4 with elements from vec : Z, W, Z, Y. Declaration public static Vector4 ZWZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZWZZ(Vector4) Constructs a new Vector4 with elements from vec : Z, W, Z, Z. Declaration public static Vector4 ZWZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZX(Vector3) Constructs a new Vector2 with elements from vec : Z, X. Declaration public static Vector2 ZX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector2 The new vector. ZX(Vector4) Constructs a new Vector2 with elements from vec : Z, X. Declaration public static Vector2 ZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. ZXW(Vector4) Constructs a new Vector3 with elements from vec : Z, X, W. Declaration public static Vector3 ZXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZXWW(Vector4) Constructs a new Vector4 with elements from vec : Z, X, W, W. Declaration public static Vector4 ZXWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXWX(Vector4) Constructs a new Vector4 with elements from vec : Z, X, W, X. Declaration public static Vector4 ZXWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXWY(Vector4) Constructs a new Vector4 with elements from vec : Z, X, W, Y. Declaration public static Vector4 ZXWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXWZ(Vector4) Constructs a new Vector4 with elements from vec : Z, X, W, Z. Declaration public static Vector4 ZXWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXX(Vector3) Constructs a new Vector3 with elements from vec : Z, X, X. Declaration public static Vector3 ZXX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZXX(Vector4) Constructs a new Vector3 with elements from vec : Z, X, X. Declaration public static Vector3 ZXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZXXW(Vector4) Constructs a new Vector4 with elements from vec : Z, X, X, W. Declaration public static Vector4 ZXXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXXX(Vector3) Constructs a new Vector4 with elements from vec : Z, X, X, X. Declaration public static Vector4 ZXXX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXXX(Vector4) Constructs a new Vector4 with elements from vec : Z, X, X, X. Declaration public static Vector4 ZXXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXXY(Vector3) Constructs a new Vector4 with elements from vec : Z, X, X, Y. Declaration public static Vector4 ZXXY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXXY(Vector4) Constructs a new Vector4 with elements from vec : Z, X, X, Y. Declaration public static Vector4 ZXXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXXZ(Vector3) Constructs a new Vector4 with elements from vec : Z, X, X, Z. Declaration public static Vector4 ZXXZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXXZ(Vector4) Constructs a new Vector4 with elements from vec : Z, X, X, Z. Declaration public static Vector4 ZXXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXY(Vector3) Constructs a new Vector3 with elements from vec : Z, X, Y. Declaration public static Vector3 ZXY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZXY(Vector4) Constructs a new Vector3 with elements from vec : Z, X, Y. Declaration public static Vector3 ZXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZXYW(Vector4) Constructs a new Vector4 with elements from vec : Z, X, Y, W. Declaration public static Vector4 ZXYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXYX(Vector3) Constructs a new Vector4 with elements from vec : Z, X, Y, X. Declaration public static Vector4 ZXYX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXYX(Vector4) Constructs a new Vector4 with elements from vec : Z, X, Y, X. Declaration public static Vector4 ZXYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXYY(Vector3) Constructs a new Vector4 with elements from vec : Z, X, Y, Y. Declaration public static Vector4 ZXYY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXYY(Vector4) Constructs a new Vector4 with elements from vec : Z, X, Y, Y. Declaration public static Vector4 ZXYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXYZ(Vector3) Constructs a new Vector4 with elements from vec : Z, X, Y, Z. Declaration public static Vector4 ZXYZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXYZ(Vector4) Constructs a new Vector4 with elements from vec : Z, X, Y, Z. Declaration public static Vector4 ZXYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXZ(Vector3) Constructs a new Vector3 with elements from vec : Z, X, Z. Declaration public static Vector3 ZXZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZXZ(Vector4) Constructs a new Vector3 with elements from vec : Z, X, Z. Declaration public static Vector3 ZXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZXZW(Vector4) Constructs a new Vector4 with elements from vec : Z, X, Z, W. Declaration public static Vector4 ZXZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXZX(Vector3) Constructs a new Vector4 with elements from vec : Z, X, Z, X. Declaration public static Vector4 ZXZX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXZX(Vector4) Constructs a new Vector4 with elements from vec : Z, X, Z, X. Declaration public static Vector4 ZXZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXZY(Vector3) Constructs a new Vector4 with elements from vec : Z, X, Z, Y. Declaration public static Vector4 ZXZY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXZY(Vector4) Constructs a new Vector4 with elements from vec : Z, X, Z, Y. Declaration public static Vector4 ZXZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXZZ(Vector3) Constructs a new Vector4 with elements from vec : Z, X, Z, Z. Declaration public static Vector4 ZXZZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZXZZ(Vector4) Constructs a new Vector4 with elements from vec : Z, X, Z, Z. Declaration public static Vector4 ZXZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZY(Vector3) Constructs a new Vector2 with elements from vec : Z, Y. Declaration public static Vector2 ZY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector2 The new vector. ZY(Vector4) Constructs a new Vector2 with elements from vec : Z, Y. Declaration public static Vector2 ZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. ZYW(Vector4) Constructs a new Vector3 with elements from vec : Z, Y, W. Declaration public static Vector3 ZYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZYWW(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, W, W. Declaration public static Vector4 ZYWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYWX(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, W, X. Declaration public static Vector4 ZYWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYWY(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, W, Y. Declaration public static Vector4 ZYWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYWZ(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, W, Z. Declaration public static Vector4 ZYWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYX(Vector3) Constructs a new Vector3 with elements from vec : Z, Y, X. Declaration public static Vector3 ZYX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZYX(Vector4) Constructs a new Vector3 with elements from vec : Z, Y, X. Declaration public static Vector3 ZYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZYXW(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, X, W. Declaration public static Vector4 ZYXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYXX(Vector3) Constructs a new Vector4 with elements from vec : Z, Y, X, X. Declaration public static Vector4 ZYXX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYXX(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, X, X. Declaration public static Vector4 ZYXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYXY(Vector3) Constructs a new Vector4 with elements from vec : Z, Y, X, Y. Declaration public static Vector4 ZYXY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYXY(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, X, Y. Declaration public static Vector4 ZYXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYXZ(Vector3) Constructs a new Vector4 with elements from vec : Z, Y, X, Z. Declaration public static Vector4 ZYXZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYXZ(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, X, Z. Declaration public static Vector4 ZYXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYY(Vector3) Constructs a new Vector3 with elements from vec : Z, Y, Y. Declaration public static Vector3 ZYY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZYY(Vector4) Constructs a new Vector3 with elements from vec : Z, Y, Y. Declaration public static Vector3 ZYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZYYW(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, Y, W. Declaration public static Vector4 ZYYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYYX(Vector3) Constructs a new Vector4 with elements from vec : Z, Y, Y, X. Declaration public static Vector4 ZYYX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYYX(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, Y, X. Declaration public static Vector4 ZYYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYYY(Vector3) Constructs a new Vector4 with elements from vec : Z, Y, Y, Y. Declaration public static Vector4 ZYYY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYYY(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, Y, Y. Declaration public static Vector4 ZYYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYYZ(Vector3) Constructs a new Vector4 with elements from vec : Z, Y, Y, Z. Declaration public static Vector4 ZYYZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYYZ(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, Y, Z. Declaration public static Vector4 ZYYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYZ(Vector3) Constructs a new Vector3 with elements from vec : Z, Y, Z. Declaration public static Vector3 ZYZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZYZ(Vector4) Constructs a new Vector3 with elements from vec : Z, Y, Z. Declaration public static Vector3 ZYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZYZW(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, Z, W. Declaration public static Vector4 ZYZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYZX(Vector3) Constructs a new Vector4 with elements from vec : Z, Y, Z, X. Declaration public static Vector4 ZYZX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYZX(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, Z, X. Declaration public static Vector4 ZYZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYZY(Vector3) Constructs a new Vector4 with elements from vec : Z, Y, Z, Y. Declaration public static Vector4 ZYZY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYZY(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, Z, Y. Declaration public static Vector4 ZYZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYZZ(Vector3) Constructs a new Vector4 with elements from vec : Z, Y, Z, Z. Declaration public static Vector4 ZYZZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZYZZ(Vector4) Constructs a new Vector4 with elements from vec : Z, Y, Z, Z. Declaration public static Vector4 ZYZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZ(Vector3) Constructs a new Vector2 with elements from vec : Z, Z. Declaration public static Vector2 ZZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector2 The new vector. ZZ(Vector4) Constructs a new Vector2 with elements from vec : Z, Z. Declaration public static Vector2 ZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector2 The new vector. ZZW(Vector4) Constructs a new Vector3 with elements from vec : Z, Z, W. Declaration public static Vector3 ZZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZZWW(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, W, W. Declaration public static Vector4 ZZWW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZWX(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, W, X. Declaration public static Vector4 ZZWX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZWY(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, W, Y. Declaration public static Vector4 ZZWY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZWZ(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, W, Z. Declaration public static Vector4 ZZWZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZX(Vector3) Constructs a new Vector3 with elements from vec : Z, Z, X. Declaration public static Vector3 ZZX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZZX(Vector4) Constructs a new Vector3 with elements from vec : Z, Z, X. Declaration public static Vector3 ZZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZZXW(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, X, W. Declaration public static Vector4 ZZXW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZXX(Vector3) Constructs a new Vector4 with elements from vec : Z, Z, X, X. Declaration public static Vector4 ZZXX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZXX(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, X, X. Declaration public static Vector4 ZZXX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZXY(Vector3) Constructs a new Vector4 with elements from vec : Z, Z, X, Y. Declaration public static Vector4 ZZXY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZXY(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, X, Y. Declaration public static Vector4 ZZXY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZXZ(Vector3) Constructs a new Vector4 with elements from vec : Z, Z, X, Z. Declaration public static Vector4 ZZXZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZXZ(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, X, Z. Declaration public static Vector4 ZZXZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZY(Vector3) Constructs a new Vector3 with elements from vec : Z, Z, Y. Declaration public static Vector3 ZZY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZZY(Vector4) Constructs a new Vector3 with elements from vec : Z, Z, Y. Declaration public static Vector3 ZZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZZYW(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, Y, W. Declaration public static Vector4 ZZYW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZYX(Vector3) Constructs a new Vector4 with elements from vec : Z, Z, Y, X. Declaration public static Vector4 ZZYX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZYX(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, Y, X. Declaration public static Vector4 ZZYX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZYY(Vector3) Constructs a new Vector4 with elements from vec : Z, Z, Y, Y. Declaration public static Vector4 ZZYY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZYY(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, Y, Y. Declaration public static Vector4 ZZYY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZYZ(Vector3) Constructs a new Vector4 with elements from vec : Z, Z, Y, Z. Declaration public static Vector4 ZZYZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZYZ(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, Y, Z. Declaration public static Vector4 ZZYZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZZ(Vector3) Constructs a new Vector3 with elements from vec : Z, Z, Z. Declaration public static Vector3 ZZZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZZZ(Vector4) Constructs a new Vector3 with elements from vec : Z, Z, Z. Declaration public static Vector3 ZZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector3 The new vector. ZZZW(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, Z, W. Declaration public static Vector4 ZZZW(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZZX(Vector3) Constructs a new Vector4 with elements from vec : Z, Z, Z, X. Declaration public static Vector4 ZZZX(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZZX(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, Z, X. Declaration public static Vector4 ZZZX(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZZY(Vector3) Constructs a new Vector4 with elements from vec : Z, Z, Z, Y. Declaration public static Vector4 ZZZY(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZZY(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, Z, Y. Declaration public static Vector4 ZZZY(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZZZ(Vector3) Constructs a new Vector4 with elements from vec : Z, Z, Z, Z. Declaration public static Vector4 ZZZZ(this Vector3 vec) Parameters Type Name Description Vector3 vec The vector from which to take values. Returns Type Description Vector4 The new vector. ZZZZ(Vector4) Constructs a new Vector4 with elements from vec : Z, Z, Z, Z. Declaration public static Vector4 ZZZZ(this Vector4 vec) Parameters Type Name Description Vector4 vec The vector from which to take values. Returns Type Description Vector4 The new vector."
  },
  "api/DoubleSharp.MathPlus.Vector2D.html": {
    "href": "api/DoubleSharp.MathPlus.Vector2D.html",
    "title": "Class Vector2D | DoubleSharp",
    "keywords": "Class Vector2D Represents a vector with two double-precision doubleing-point values. Inheritance Object Vector2D Implements IEquatable < Vector2D > IFormattable Namespace : DoubleSharp.MathPlus Assembly : DoubleSharp.dll Syntax public sealed class Vector2D : ValueType Constructors Vector2D(Double) Creates a new Vector2D object whose two elements have the same value. Declaration public Vector2D(double value) Parameters Type Name Description Double value The value to assign to both elements. Vector2D(Double, Double) Creates a vector whose elements have the specified values. Declaration public Vector2D(double x, double y) Parameters Type Name Description Double x The value to assign to the X field. Double y The value to assign to the Y field. Vector2D(ReadOnlySpan<Double>) Constructs a vector from the given ReadOnlySpan<T> . The span must contain at least 2 elements. Declaration public Vector2D(ReadOnlySpan<double> values) Parameters Type Name Description ReadOnlySpan < Double > values The span of elements to assign to the vector. Fields X The X component of the vector. Declaration public double X Field Value Type Description Double Y The Y component of the vector. Declaration public double Y Field Value Type Description Double Properties Item[Int32] Gets or sets the element at the specified index. Declaration public double this[int index] { get; set; } Parameters Type Name Description Int32 index The index of the element to get or set. Property Value Type Description Double The the element at index . Exceptions Type Condition ArgumentOutOfRangeException index was less than zero or greater than the number of elements. One Gets a vector whose 2 elements are equal to one. Declaration public static Vector2D One { get; } Property Value Type Description Vector2D A vector whose two elements are equal to one (that is, it returns the vector (1,1) . UnitX Gets the vector (1,0). Declaration public static Vector2D UnitX { get; } Property Value Type Description Vector2D The vector (1,0) . UnitY Gets the vector (0,1). Declaration public static Vector2D UnitY { get; } Property Value Type Description Vector2D The vector (0,1) . Zero Gets a vector whose 2 elements are equal to zero. Declaration public static Vector2D Zero { get; } Property Value Type Description Vector2D A vector whose two elements are equal to zero (that is, it returns the vector (0,0) . Methods Abs(Vector2D) Returns a vector whose elements are the absolute values of each of the specified vector's elements. Declaration public static Vector2D Abs(Vector2D value) Parameters Type Name Description Vector2D value A vector. Returns Type Description Vector2D The absolute value vector. Add(Vector2D, Vector2D) Adds two vectors together. Declaration public static Vector2D Add(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first vector to add. Vector2D right The second vector to add. Returns Type Description Vector2D The summed vector. Clamp(Vector2D, Vector2D, Vector2D) Restricts a vector between a minimum and a maximum value. Declaration public static Vector2D Clamp(Vector2D value1, Vector2D min, Vector2D max) Parameters Type Name Description Vector2D value1 The vector to restrict. Vector2D min The minimum value. Vector2D max The maximum value. Returns Type Description Vector2D The restricted vector. CopyTo(Double[]) Copies the elements of the vector to a specified array. Declaration public void CopyTo(double[] array) Parameters Type Name Description Double [] array The destination array. Remarks array must have at least two elements. The method copies the vector's elements starting at index 0. Exceptions Type Condition NullReferenceException array is null . ArgumentException The number of elements in the current instance is greater than in the array. RankException array is multidimensional. CopyTo(Double[], Int32) Copies the elements of the vector to a specified array starting at a specified index position. Declaration public void CopyTo(double[] array, int index) Parameters Type Name Description Double [] array The destination array. Int32 index The index at which to copy the first element of the vector. Remarks array must have a sufficient number of elements to accommodate the two vector elements. In other words, elements index and index + 1 must already exist in array . Exceptions Type Condition NullReferenceException array is null . ArgumentException The number of elements in the current instance is greater than in the array. ArgumentOutOfRangeException index is less than zero. -or- index is greater than or equal to the array length. RankException array is multidimensional. CopyTo(Span<Double>) Copies the vector to the given Span<T> .The length of the destination span must be at least 2. Declaration public void CopyTo(Span<double> destination) Parameters Type Name Description Span < Double > destination The destination span which the values are copied into. Exceptions Type Condition ArgumentException If number of elements in source vector is greater than those available in destination span. Distance(Vector2D, Vector2D) Computes the Euclidean distance between the two given points. Declaration public static double Distance(Vector2D value1, Vector2D value2) Parameters Type Name Description Vector2D value1 The first point. Vector2D value2 The second point. Returns Type Description Double The distance. DistanceSquared(Vector2D, Vector2D) Returns the Euclidean distance squared between two specified points. Declaration public static double DistanceSquared(Vector2D value1, Vector2D value2) Parameters Type Name Description Vector2D value1 The first point. Vector2D value2 The second point. Returns Type Description Double The distance squared. Divide(Vector2D, Vector2D) Divides the first vector by the second. Declaration public static Vector2D Divide(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first vector. Vector2D right The second vector. Returns Type Description Vector2D The vector resulting from the division. Divide(Vector2D, Double) Divides the specified vector by a specified scalar value. Declaration public static Vector2D Divide(Vector2D left, double divisor) Parameters Type Name Description Vector2D left The vector. Double divisor The scalar value. Returns Type Description Vector2D The vector that results from the division. Dot(Vector2D, Vector2D) Returns the dot product of two vectors. Declaration public static double Dot(Vector2D value1, Vector2D value2) Parameters Type Name Description Vector2D value1 The first vector. Vector2D value2 The second vector. Returns Type Description Double The dot product. Equals(Vector2D) Returns a value that indicates whether this instance and another vector are equal. Declaration public bool Equals(Vector2D other) Parameters Type Name Description Vector2D other The other vector. Returns Type Description Boolean true if the two vectors are equal; otherwise, false . Remarks Two vectors are equal if their X and Y elements are equal. Equals(Object) Returns a value that indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current instance. Returns Type Description Boolean true if the current instance and obj are equal; otherwise, false . If obj is null , the method returns false . Remarks The current instance and obj are equal if obj is a Vector2D object and their X and Y elements are equal. GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 The hash code. Length() Returns the length of the vector. Declaration public double Length() Returns Type Description Double The vector's length. LengthSquared() Returns the length of the vector squared. Declaration public double LengthSquared() Returns Type Description Double The vector's length squared. Remarks This operation offers better performance than a call to the Length() method. Lerp(Vector2D, Vector2D, Double) Performs a linear interpolation between two vectors based on the given weighting. Declaration public static Vector2D Lerp(Vector2D value1, Vector2D value2, double amount) Parameters Type Name Description Vector2D value1 The first vector. Vector2D value2 The second vector. Double amount A value between 0 and 1 that indicates the weight of value2 . Returns Type Description Vector2D The interpolated vector. Remarks The behavior of this method changed in .NET 5.0. For more information, see [Behavior change for Vector2D.Lerp and Vector4.Lerp](/dotnet/core/compatibility/3.1-5.0#behavior-change-for-Vector2Dlerp-and-vector4lerp). Max(Vector2D, Vector2D) Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors. Declaration public static Vector2D Max(Vector2D value1, Vector2D value2) Parameters Type Name Description Vector2D value1 The first vector. Vector2D value2 The second vector. Returns Type Description Vector2D The maximized vector. Min(Vector2D, Vector2D) Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors. Declaration public static Vector2D Min(Vector2D value1, Vector2D value2) Parameters Type Name Description Vector2D value1 The first vector. Vector2D value2 The second vector. Returns Type Description Vector2D The minimized vector. Multiply(Vector2D, Vector2D) Returns a new vector whose values are the product of each pair of elements in two specified vectors. Declaration public static Vector2D Multiply(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first vector. Vector2D right The second vector. Returns Type Description Vector2D The element-wise product vector. Multiply(Vector2D, Double) Multiplies a vector by a specified scalar. Declaration public static Vector2D Multiply(Vector2D left, double right) Parameters Type Name Description Vector2D left The vector to multiply. Double right The scalar value. Returns Type Description Vector2D The scaled vector. Multiply(Double, Vector2D) Multiplies a scalar value by a specified vector. Declaration public static Vector2D Multiply(double left, Vector2D right) Parameters Type Name Description Double left The scaled value. Vector2D right The vector. Returns Type Description Vector2D The scaled vector. Negate(Vector2D) Negates a specified vector. Declaration public static Vector2D Negate(Vector2D value) Parameters Type Name Description Vector2D value The vector to negate. Returns Type Description Vector2D The negated vector. Normalize(Vector2D) Returns a vector with the same direction as the specified vector, but with a length of one. Declaration public static Vector2D Normalize(Vector2D value) Parameters Type Name Description Vector2D value The vector to normalize. Returns Type Description Vector2D The normalized vector. Reflect(Vector2D, Vector2D) Returns the reflection of a vector off a surface that has the specified normal. Declaration public static Vector2D Reflect(Vector2D vector, Vector2D normal) Parameters Type Name Description Vector2D vector The source vector. Vector2D normal The normal of the surface being reflected off. Returns Type Description Vector2D The reflected vector. SquareRoot(Vector2D) Returns a vector whose elements are the square root of each of a specified vector's elements. Declaration public static Vector2D SquareRoot(Vector2D value) Parameters Type Name Description Vector2D value A vector. Returns Type Description Vector2D The square root vector. Subtract(Vector2D, Vector2D) Subtracts the second vector from the first. Declaration public static Vector2D Subtract(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first vector. Vector2D right The second vector. Returns Type Description Vector2D The difference vector. ToString() Returns the string representation of the current instance using default formatting. Declaration public override string ToString() Returns Type Description String The string representation of the current instance. Remarks This method returns a string in which each element of the vector is formatted using the \"G\" (general) format string and the formatting conventions of the current thread culture. The \"<\" and \">\" characters are used to begin and end the string, and the current culture's NumberGroupSeparator property followed by a space is used to separate each element. ToString(String) Returns the string representation of the current instance using the specified format string to format individual elements. Declaration public string ToString(string format) Parameters Type Name Description String format A standard or custom numeric format string that defines the format of individual elements. Returns Type Description String The string representation of the current instance. Remarks This method returns a string in which each element of the vector is formatted using format and the current culture's formatting conventions. The \"<\" and \">\" characters are used to begin and end the string, and the current culture's NumberGroupSeparator property followed by a space is used to separate each element. ToString(String, IFormatProvider) Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description String format A standard or custom numeric format string that defines the format of individual elements. IFormatProvider formatProvider A format provider that supplies culture-specific formatting information. Returns Type Description String The string representation of the current instance. Remarks This method returns a string in which each element of the vector is formatted using format and formatProvider . The \"<\" and \">\" characters are used to begin and end the string, and the format provider's NumberGroupSeparator property followed by a space is used to separate each element. TryCopyTo(Span<Double>) Attempts to copy the vector to the given Span<T> . The length of the destination span must be at least 2. Declaration public bool TryCopyTo(Span<double> destination) Parameters Type Name Description Span < Double > destination The destination span which the values are copied into. Returns Type Description Boolean true if the source vector was successfully copied to destination . false if destination is not large enough to hold the source vector. Operators Addition(Vector2D, Vector2D) Adds two vectors together. Declaration public static Vector2D operator +(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first vector to add. Vector2D right The second vector to add. Returns Type Description Vector2D The summed vector. Remarks The Addition(Vector2D, Vector2D) method defines the addition operation for Vector2D objects. Division(Vector2D, Vector2D) Divides the first vector by the second. Declaration public static Vector2D operator /(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first vector. Vector2D right The second vector. Returns Type Description Vector2D The vector that results from dividing left by right . Remarks The Division(Vector2D, Vector2D) method defines the division operation for Vector2D objects. Division(Vector2D, Double) Divides the specified vector by a specified scalar value. Declaration public static Vector2D operator /(Vector2D value1, double value2) Parameters Type Name Description Vector2D value1 The vector. Double value2 The scalar value. Returns Type Description Vector2D The result of the division. Remarks The Division(Vector2D, Double) method defines the division operation for Vector2D objects. Equality(Vector2D, Vector2D) Returns a value that indicates whether each pair of elements in two specified vectors is equal. Declaration public static bool operator ==(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first vector to compare. Vector2D right The second vector to compare. Returns Type Description Boolean true if left and right are equal; otherwise, false . Remarks Two Vector2D objects are equal if each value in left is equal to the corresponding value in right . Inequality(Vector2D, Vector2D) Returns a value that indicates whether two specified vectors are not equal. Declaration public static bool operator !=(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first vector to compare. Vector2D right The second vector to compare. Returns Type Description Boolean true if left and right are not equal; otherwise, false . Multiply(Vector2D, Vector2D) Returns a new vector whose values are the product of each pair of elements in two specified vectors. Declaration public static Vector2D operator *(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first vector. Vector2D right The second vector. Returns Type Description Vector2D The element-wise product vector. Remarks The Multiply(Vector2D, Vector2D) method defines the multiplication operation for Vector2D objects. Multiply(Vector2D, Double) Multiplies the specified vector by the specified scalar value. Declaration public static Vector2D operator *(Vector2D left, double right) Parameters Type Name Description Vector2D left The vector. Double right The scalar value. Returns Type Description Vector2D The scaled vector. Remarks The Multiply(Vector2D, Double) method defines the multiplication operation for Vector2D objects. Multiply(Double, Vector2D) Multiplies the scalar value by the specified vector. Declaration public static Vector2D operator *(double left, Vector2D right) Parameters Type Name Description Double left The vector. Vector2D right The scalar value. Returns Type Description Vector2D The scaled vector. Remarks The Multiply(Double, Vector2D) method defines the multiplication operation for Vector2D objects. Subtraction(Vector2D, Vector2D) Subtracts the second vector from the first. Declaration public static Vector2D operator -(Vector2D left, Vector2D right) Parameters Type Name Description Vector2D left The first vector. Vector2D right The second vector. Returns Type Description Vector2D The vector that results from subtracting right from left . Remarks The Subtraction(Vector2D, Vector2D) method defines the subtraction operation for Vector2D objects. UnaryNegation(Vector2D) Negates the specified vector. Declaration public static Vector2D operator -(Vector2D value) Parameters Type Name Description Vector2D value The vector to negate. Returns Type Description Vector2D The negated vector. Remarks The UnaryNegation(Vector2D) method defines the unary negation operation for Vector2D objects. Implements System.IEquatable<T> System.IFormattable Extension Methods ConcurrencyExtensions.Locked<T>(T, Action) ConcurrencyExtensions.Locked<T>(T, Action<T>) SwizzleExtensions.XX(Vector2D) SwizzleExtensions.XY(Vector2D) SwizzleExtensions.YX(Vector2D) SwizzleExtensions.YY(Vector2D) VectorExtensions.Deconstruct(Vector2D, out Double, out Double) VectorExtensions.ToTuple(Vector2D) VectorExtensions.ToArray(Vector2D) VectorExtensions.Normalize(Vector2D) VectorExtensions.Abs(Vector2D) VectorExtensions.Cross(Vector2D, Vector2D) VectorExtensions.DistanceTo(Vector2D, Vector2D) VectorExtensions.SquaredDistanceTo(Vector2D, Vector2D) VectorExtensions.Min(Vector2D, Vector2D) VectorExtensions.Max(Vector2D, Vector2D) VectorExtensions.Lerp(Vector2D, Vector2D, Double) VectorExtensions.Rotate(Vector2D, Double) PrettyExtensions.Print<T>(T) PrettyExtensions.PrettyPrint<T>(T) PrettyExtensions.ToPrettyString<T>(T)"
  },
  "api/DoubleSharp.MathPlus.VectorExtensions.html": {
    "href": "api/DoubleSharp.MathPlus.VectorExtensions.html",
    "title": "Class VectorExtensions | DoubleSharp",
    "keywords": "Class VectorExtensions DoubleSharp vector extensions. Inheritance Object VectorExtensions Namespace : DoubleSharp.MathPlus Assembly : DoubleSharp.dll Syntax public static class VectorExtensions : Object Methods Abs(Vector2D) Makes a new vector with the absolute value of each element of an input vector. Declaration public static Vector2D Abs(this Vector2D vec) Parameters Type Name Description Vector2D vec Returns Type Description Vector2D The absolute value of vec . Abs(Vector2) Makes a new vector with the absolute value of each element of an input vector. Declaration public static Vector2 Abs(this Vector2 vec) Parameters Type Name Description Vector2 vec The input vector. Returns Type Description Vector2 The absolute value of vec . Abs(Vector3) Makes a new vector with the absolute value of each element of an input vector. Declaration public static Vector3 Abs(this Vector3 vec) Parameters Type Name Description Vector3 vec Returns Type Description Vector3 The absolute value of vec . Abs(Vector4) Makes a new vector with the absolute value of each element of an input vector. Declaration public static Vector4 Abs(this Vector4 vec) Parameters Type Name Description Vector4 vec Returns Type Description Vector4 The absolute value of vec . Centroid(IEnumerable<Vector2D>) Returns the centroid of a given sequence of vectors. Declaration public static Vector2D Centroid(this IEnumerable<Vector2D> source) Parameters Type Name Description IEnumerable < Vector2D > source Returns Type Description Vector2D The centroid of the vectors. If the sequence is empty, the origin is returned. Centroid(IEnumerable<Vector2>) Returns the centroid of a given sequence of vectors. Declaration public static Vector2 Centroid(this IEnumerable<Vector2> source) Parameters Type Name Description IEnumerable < Vector2 > source The sequence of vectors. Returns Type Description Vector2 The centroid of the vectors. If the sequence is empty, the origin is returned. Centroid(IEnumerable<Vector3>) Returns the centroid of a given sequence of vectors. Declaration public static Vector3 Centroid(this IEnumerable<Vector3> source) Parameters Type Name Description IEnumerable < Vector3 > source Returns Type Description Vector3 The centroid of the vectors. If the sequence is empty, the origin is returned. Centroid(IEnumerable<Vector4>) Returns the centroid of a given sequence of vectors. Declaration public static Vector4 Centroid(this IEnumerable<Vector4> source) Parameters Type Name Description IEnumerable < Vector4 > source Returns Type Description Vector4 The centroid of the vectors. If the sequence is empty, the origin is returned. Cross(Vector2D, Vector2D) The 2d cross product of two Vector2 values. Declaration public static double Cross(this Vector2D a, Vector2D b) Parameters Type Name Description Vector2D a Vector2D b Returns Type Description Double The 2d cross product of a and b . Cross(Vector2, Vector2) The 2d cross product of two Vector2 values. Declaration public static float Cross(this Vector2 a, Vector2 b) Parameters Type Name Description Vector2 a The first vector. Vector2 b The second vector. Returns Type Description Single The 2d cross product of a and b . Deconstruct(Vector2D, out Double, out Double) Deconstructs the elements of a Vector2D. Declaration public static void Deconstruct(this Vector2D vec, out double x, out double y) Parameters Type Name Description Vector2D vec The input Vector2D. Double x The output X element. Double y The output Y element. Deconstruct(Vector2, out Single, out Single) Deconstructs the elements of a Vector2. Declaration public static void Deconstruct(this Vector2 vec, out float x, out float y) Parameters Type Name Description Vector2 vec The input Vector2. Single x The output X element. Single y The output Y element. Deconstruct(Vector3, out Single, out Single, out Single) Deconstructs the elements of a Vector3. Declaration public static void Deconstruct(this Vector3 vec, out float x, out float y, out float z) Parameters Type Name Description Vector3 vec The input Vector3. Single x The output X element. Single y The output Y element. Single z The output Z element. Deconstruct(Vector4, out Single, out Single, out Single, out Single) Deconstructs the elements of a Vector4. Declaration public static void Deconstruct(this Vector4 vec, out float x, out float y, out float z, out float w) Parameters Type Name Description Vector4 vec The input Vector4. Single x The output X element. Single y The output Y element. Single z The output Z element. Single w The output W element. DistanceTo(Vector2D, Vector2D) Gives the Euclidean distance of two vectors. Declaration public static double DistanceTo(this Vector2D a, Vector2D b) Parameters Type Name Description Vector2D a Vector2D b Returns Type Description Double The Euclidean distance between a and b . DistanceTo(Vector2, Vector2) Gives the Euclidean distance of two vectors. Declaration public static float DistanceTo(this Vector2 a, Vector2 b) Parameters Type Name Description Vector2 a The first vector. Vector2 b The second vector. Returns Type Description Single The Euclidean distance between a and b . DistanceTo(Vector3, Vector3) Gives the Euclidean distance of two vectors. Declaration public static float DistanceTo(this Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a Vector3 b Returns Type Description Single The Euclidean distance between a and b . DistanceTo(Vector4, Vector4) Gives the Euclidean distance of two vectors. Declaration public static float DistanceTo(this Vector4 a, Vector4 b) Parameters Type Name Description Vector4 a Vector4 b Returns Type Description Single The Euclidean distance between a and b . Lerp(Vector2D, Vector2D, Double) Performs linear interpolation. Declaration public static Vector2D Lerp(this Vector2D a, Vector2D b, double t) Parameters Type Name Description Vector2D a Vector2D b Double t Returns Type Description Vector2D The linear interpolation of a to b using t in the range 0-1. Lerp(Vector2, Vector2, Single) Performs linear interpolation. Declaration public static Vector2 Lerp(this Vector2 a, Vector2 b, float t) Parameters Type Name Description Vector2 a The start vector. Vector2 b The end vector. Single t A value ranging from 0 to 1. Returns Type Description Vector2 The linear interpolation of a to b using t in the range 0-1. Lerp(Vector3, Vector3, Single) Performs linear interpolation. Declaration public static Vector3 Lerp(this Vector3 a, Vector3 b, float t) Parameters Type Name Description Vector3 a Vector3 b Single t A value ranging from 0 to 1. Returns Type Description Vector3 The linear interpolation of a to b using t in the range 0-1. Lerp(Vector4, Vector4, Single) Performs linear interpolation. Declaration public static Vector4 Lerp(this Vector4 a, Vector4 b, float t) Parameters Type Name Description Vector4 a Vector4 b Single t A value ranging from 0 to 1. Returns Type Description Vector4 The linear interpolation of a to b using t in the range 0-1. Map(Vector2, Func<Double, Double>) Maps each element of an input vector using a supplied function to produce a new vector. Declaration public static Vector2D Map(this Vector2 vec, Func<double, double> functor) Parameters Type Name Description Vector2 vec The input vector. Func < Double , Double > functor Returns Type Description Vector2D The mapped vector. Map(Vector2, Func<Single, Single>) Maps each element of an input vector using a supplied function to produce a new vector. Declaration public static Vector2 Map(this Vector2 vec, Func<float, float> functor) Parameters Type Name Description Vector2 vec The input vector. Func < Single , Single > functor The function to apply to each element of vec . Returns Type Description Vector2 The mapped vector. Map(Vector3, Func<Single, Single>) Maps each element of an input vector using a supplied function to produce a new vector. Declaration public static Vector3 Map(this Vector3 vec, Func<float, float> functor) Parameters Type Name Description Vector3 vec Func < Single , Single > functor The function to apply to each element of vec . Returns Type Description Vector3 The mapped vector. Map(Vector4, Func<Single, Single>) Maps each element of an input vector using a supplied function to produce a new vector. Declaration public static Vector4 Map(this Vector4 vec, Func<float, float> functor) Parameters Type Name Description Vector4 vec Func < Single , Single > functor The function to apply to each element of vec . Returns Type Description Vector4 The mapped vector. Max(Vector2D, Vector2D) Takes the elementwise maximum of two vectors. Declaration public static Vector2D Max(this Vector2D a, Vector2D b) Parameters Type Name Description Vector2D a Vector2D b Returns Type Description Vector2D The elementwise maximum of a and b . Max(Vector2, Vector2) Takes the elementwise maximum of two vectors. Declaration public static Vector2 Max(this Vector2 a, Vector2 b) Parameters Type Name Description Vector2 a The first vector. Vector2 b The second vector. Returns Type Description Vector2 The elementwise maximum of a and b . Max(Vector3, Vector3) Takes the elementwise maximum of two vectors. Declaration public static Vector3 Max(this Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a Vector3 b Returns Type Description Vector3 The elementwise maximum of a and b . Max(Vector4, Vector4) Takes the elementwise maximum of two vectors. Declaration public static Vector4 Max(this Vector4 a, Vector4 b) Parameters Type Name Description Vector4 a Vector4 b Returns Type Description Vector4 The elementwise maximum of a and b . Min(Vector2D, Vector2D) Takes the elementwise minimum of two vectors. Declaration public static Vector2D Min(this Vector2D a, Vector2D b) Parameters Type Name Description Vector2D a Vector2D b Returns Type Description Vector2D The elementwise minimum of a and b . Min(Vector2, Vector2) Takes the elementwise minimum of two vectors. Declaration public static Vector2 Min(this Vector2 a, Vector2 b) Parameters Type Name Description Vector2 a The first vector. Vector2 b The second vector. Returns Type Description Vector2 The elementwise minimum of a and b . Min(Vector3, Vector3) Takes the elementwise minimum of two vectors. Declaration public static Vector3 Min(this Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a Vector3 b Returns Type Description Vector3 The elementwise minimum of a and b . Min(Vector4, Vector4) Takes the elementwise minimum of two vectors. Declaration public static Vector4 Min(this Vector4 a, Vector4 b) Parameters Type Name Description Vector4 a Vector4 b Returns Type Description Vector4 The elementwise minimum of a and b . Normalize(Vector2D) Normalizes an input vector without modifying the original. Declaration public static Vector2D Normalize(this Vector2D vec) Parameters Type Name Description Vector2D vec Returns Type Description Vector2D The normalized version of vec . Normalize(Vector2) Normalizes an input vector without modifying the original. Declaration public static Vector2 Normalize(this Vector2 vec) Parameters Type Name Description Vector2 vec The vector to normalize. Returns Type Description Vector2 The normalized version of vec . Normalize(Vector3) Normalizes an input vector without modifying the original. Declaration public static Vector3 Normalize(this Vector3 vec) Parameters Type Name Description Vector3 vec Returns Type Description Vector3 The normalized version of vec . Normalize(Vector4) Normalizes an input vector without modifying the original. Declaration public static Vector4 Normalize(this Vector4 vec) Parameters Type Name Description Vector4 vec Returns Type Description Vector4 The normalized version of vec . Rotate(Vector2D, Double) Rotates a Vector2D by an arbitrary angle in radians. Declaration public static Vector2D Rotate(this Vector2D vec, double theta) Parameters Type Name Description Vector2D vec The vector to rotate. Double theta The angle in radians. Returns Type Description Vector2D The vector vec rotated by theta radians. Rotate(Vector2, Single) Rotates a Vector2 by an arbitrary angle in radians. Declaration public static Vector2 Rotate(this Vector2 vec, float theta) Parameters Type Name Description Vector2 vec The vector to rotate. Single theta The angle in radians. Returns Type Description Vector2 The vector vec rotated by theta radians. SquaredDistanceTo(Vector2D, Vector2D) Gives the square of the Euclidean distance of two vectors. Declaration public static double SquaredDistanceTo(this Vector2D a, Vector2D b) Parameters Type Name Description Vector2D a Vector2D b Returns Type Description Double The square of the Euclidean distance between a and b . SquaredDistanceTo(Vector2, Vector2) Gives the square of the Euclidean distance of two vectors. Declaration public static float SquaredDistanceTo(this Vector2 a, Vector2 b) Parameters Type Name Description Vector2 a The first vector. Vector2 b The second vector. Returns Type Description Single The square of the Euclidean distance between a and b . SquaredDistanceTo(Vector3, Vector3) Gives the square of the Euclidean distance of two vectors. Declaration public static float SquaredDistanceTo(this Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a Vector3 b Returns Type Description Single The square of the Euclidean distance between a and b . SquaredDistanceTo(Vector4, Vector4) Gives the square of the Euclidean distance of two vectors. Declaration public static float SquaredDistanceTo(this Vector4 a, Vector4 b) Parameters Type Name Description Vector4 a Vector4 b Returns Type Description Single The square of the Euclidean distance between a and b . ToArray(Vector2D) Converts a Vector2D to an array containing the same elements. Declaration public static double[] ToArray(this Vector2D vec) Parameters Type Name Description Vector2D vec The input Vector2D. Returns Type Description Double [] An array containing the elements of vec . ToArray(Vector2) Converts a Vector2 to an array containing the same elements. Declaration public static float[] ToArray(this Vector2 vec) Parameters Type Name Description Vector2 vec The input Vector2. Returns Type Description Single [] An array containing the elements of vec . ToArray(Vector3) Converts a Vector3 to an array containing the same elements. Declaration public static float[] ToArray(this Vector3 vec) Parameters Type Name Description Vector3 vec The input Vector3. Returns Type Description Single [] An array containing the elements of vec . ToArray(Vector4) Converts a Vector4 to an array containing the same elements. Declaration public static float[] ToArray(this Vector4 vec) Parameters Type Name Description Vector4 vec The input Vector4. Returns Type Description Single [] An array containing the elements of vec . ToTuple(Vector2D) Converts a Vector2D to a tuple containing the same elements. Declaration public static (double, double) ToTuple(this Vector2D vec) Parameters Type Name Description Vector2D vec The input Vector2D. Returns Type Description (, ) < Double , Double > A tuple containing the elements of vec . ToTuple(Vector2) Converts a Vector2 to a tuple containing the same elements. Declaration public static (float, float) ToTuple(this Vector2 vec) Parameters Type Name Description Vector2 vec The input Vector2. Returns Type Description (, ) < Single , Single > A tuple containing the elements of vec . ToTuple(Vector3) Converts a Vector3 to a tuple containing the same elements. Declaration public static (float, float, float) ToTuple(this Vector3 vec) Parameters Type Name Description Vector3 vec The input Vector3. Returns Type Description (, , ) < Single , Single , Single > A tuple containing the elements of vec . ToTuple(Vector4) Converts a Vector4 to a tuple containing the same elements. Declaration public static (float, float, float, float) ToTuple(this Vector4 vec) Parameters Type Name Description Vector4 vec The input Vector4. Returns Type Description (, , , ) < Single , Single , Single , Single > A tuple containing the elements of vec . ToVector((Double, Double)) Creates a Vector2D from the elements of an input tuple. Declaration public static Vector2D ToVector(this (double, double) tuple) Parameters Type Name Description (, ) < Double , Double > tuple The tuple to convert. Returns Type Description Vector2D A Vector2Dwith the elements from tuple . ToVector((Int32, Int32, Int32, Int32)) Creates a Vector4 from the elements of an input tuple. Declaration public static Vector4 ToVector(this (int, int, int, int) tuple) Parameters Type Name Description (, , , ) < Int32 , Int32 , Int32 , Int32 > tuple Returns Type Description Vector4 A Vector4 with the elements from tuple . ToVector((Int32, Int32, Int32)) Creates a Vector3 from the elements of an input tuple. Declaration public static Vector3 ToVector(this (int, int, int) tuple) Parameters Type Name Description (, , ) < Int32 , Int32 , Int32 > tuple Returns Type Description Vector3 A Vector3 with the elements from tuple . ToVector((Int32, Int32)) Creates a Vector2 from the elements of an input tuple. Declaration public static Vector2 ToVector(this (int, int) tuple) Parameters Type Name Description (, ) < Int32 , Int32 > tuple Returns Type Description Vector2 A Vector2 with the elements from tuple . ToVector((Single, Single, Single, Single)) Creates a Vector4 from the elements of an input tuple. Declaration public static Vector4 ToVector(this (float, float, float, float) tuple) Parameters Type Name Description (, , , ) < Single , Single , Single , Single > tuple The tuple to convert. Returns Type Description Vector4 A Vector4 with the elements from tuple . ToVector((Single, Single, Single)) Creates a Vector3 from the elements of an input tuple. Declaration public static Vector3 ToVector(this (float, float, float) tuple) Parameters Type Name Description (, , ) < Single , Single , Single > tuple The tuple to convert. Returns Type Description Vector3 A Vector3 with the elements from tuple . ToVector((Single, Single)) Creates a Vector2 from the elements of an input tuple. Declaration public static Vector2 ToVector(this (float, float) tuple) Parameters Type Name Description (, ) < Single , Single > tuple The tuple to convert. Returns Type Description Vector2 A Vector2 with the elements from tuple . ToVector2D((Int32, Int32)) Creates a Vector2 from the elements of an input tuple. Declaration public static Vector2D ToVector2D(this (int, int) tuple) Parameters Type Name Description (, ) < Int32 , Int32 > tuple Returns Type Description Vector2D A Vector2 with the elements from tuple ."
  },
  "api/DoubleSharp.Pretty.html": {
    "href": "api/DoubleSharp.Pretty.html",
    "title": "Namespace DoubleSharp.Pretty | DoubleSharp",
    "keywords": "Namespace DoubleSharp.Pretty Classes PrettyExtensions DoubleSharp pretty printing extensions. PrettyPrinterAttribute An attribute applied to static methods which take a value of a given type and return a pretty-printed string. All methods with this attribute are automatically registered for pretty printing. Interfaces IPrettyPrintable IPrettyPrintable is the base class for any object which has special handling for pretty printing."
  },
  "api/DoubleSharp.Pretty.IPrettyPrintable.html": {
    "href": "api/DoubleSharp.Pretty.IPrettyPrintable.html",
    "title": "Interface IPrettyPrintable | DoubleSharp",
    "keywords": "Interface IPrettyPrintable IPrettyPrintable is the base class for any object which has special handling for pretty printing. Namespace : DoubleSharp.Pretty Assembly : DoubleSharp.dll Syntax public interface IPrettyPrintable Methods ToPrettyString() Returns the pretty printed string representing the object. Declaration string ToPrettyString() Returns Type Description String The pretty printed string representing the object. Extension Methods ConcurrencyExtensions.Locked<T>(T, Action) ConcurrencyExtensions.Locked<T>(T, Action<T>) PrettyExtensions.Print<T>(T) PrettyExtensions.PrettyPrint<T>(T) PrettyExtensions.ToPrettyString<T>(T)"
  },
  "api/DoubleSharp.Pretty.PrettyExtensions.html": {
    "href": "api/DoubleSharp.Pretty.PrettyExtensions.html",
    "title": "Class PrettyExtensions | DoubleSharp",
    "keywords": "Class PrettyExtensions DoubleSharp pretty printing extensions. Inheritance Object PrettyExtensions Namespace : DoubleSharp.Pretty Assembly : DoubleSharp.dll Syntax public static class PrettyExtensions : Object Methods PrettyPrint<T>(T) Pretty-prints an object to Console. Declaration public static T PrettyPrint<T>(this T obj) Parameters Type Name Description T obj The object to print. Returns Type Description T The original object, obj . Type Parameters Name Description T The type of obj . Print<T>(T) Pretty-prints an object to Console. Declaration public static T Print<T>(this T obj) Parameters Type Name Description T obj The object to print. Returns Type Description T The original object, obj . Type Parameters Name Description T The type of obj . ToPrettyString<T>(T) Convert an object to a pretty-printed string. Declaration public static string ToPrettyString<T>(this T obj) Parameters Type Name Description T obj The object to pretty-print. Returns Type Description String The pretty-printed string value of obj . Type Parameters Name Description T The type of obj ."
  },
  "api/DoubleSharp.Pretty.PrettyPrinterAttribute.html": {
    "href": "api/DoubleSharp.Pretty.PrettyPrinterAttribute.html",
    "title": "Class PrettyPrinterAttribute | DoubleSharp",
    "keywords": "Class PrettyPrinterAttribute An attribute applied to static methods which take a value of a given type and return a pretty-printed string. All methods with this attribute are automatically registered for pretty printing. Inheritance Object PrettyPrinterAttribute Namespace : DoubleSharp.Pretty Assembly : DoubleSharp.dll Syntax public class PrettyPrinterAttribute : Attribute Constructors PrettyPrinterAttribute() Declaration public PrettyPrinterAttribute() Extension Methods ConcurrencyExtensions.Locked<T>(T, Action) ConcurrencyExtensions.Locked<T>(T, Action<T>) PrettyExtensions.Print<T>(T) PrettyExtensions.PrettyPrint<T>(T) PrettyExtensions.ToPrettyString<T>(T)"
  },
  "api/DoubleSharp.Progress.html": {
    "href": "api/DoubleSharp.Progress.html",
    "title": "Namespace DoubleSharp.Progress | DoubleSharp",
    "keywords": "Namespace DoubleSharp.Progress Classes ProgressExtensions DoubleSharp progress bar extensions."
  },
  "api/DoubleSharp.Progress.ProgressExtensions.html": {
    "href": "api/DoubleSharp.Progress.ProgressExtensions.html",
    "title": "Class ProgressExtensions | DoubleSharp",
    "keywords": "Class ProgressExtensions DoubleSharp progress bar extensions. Inheritance Object ProgressExtensions Namespace : DoubleSharp.Progress Assembly : DoubleSharp.dll Syntax public static class ProgressExtensions : Object Methods WithProgress<T>(ICollection<T>, Boolean) Creates an IEnumerable<T> that enumerates through elements of a sequence and prints a progress bar to the Console . Declaration public static IEnumerable<T> WithProgress<T>(this ICollection<T> source, bool constantUpdate = false) Parameters Type Name Description ICollection <T> source The source collection. Boolean constantUpdate If true, prints a new progress line every time a new element is processed. Otherwise, new progress lines are only printed when an additional \"notch\" of progress has been reached. Returns Type Description IEnumerable <T> An IEnumerable<T> containing the elements of source enumerable. Type Parameters Name Description T Type of elements of source. WithProgress<T>(IEnumerable<T>, Nullable<Int32>, Boolean) Creates an IEnumerable<T> that enumerates through elements of a sequence and prints a progress bar to the Console . Declaration public static IEnumerable<T> WithProgress<T>(this IEnumerable<T> source, Nullable<int> count = null, bool constantUpdate = false) Parameters Type Name Description IEnumerable <T> source The source enumerable. Nullable < Int32 > count The count of elements in source . If null, the the progress bar will display the progress as unknown. Boolean constantUpdate If true, prints a new progress line every time a new element is processed. Otherwise, new progress lines are only printed when an additional \"notch\" of progress has been reached. Returns Type Description IEnumerable <T> An IEnumerable<T> containing the elements of source enumerable. Type Parameters Name Description T Type of elements of source. WithTimedProgress<T>(ICollection<T>, Boolean) Creates an IEnumerable<T> that enumerates through elements of a sequence and prints a progress bar to the Console , showing the elapsed time and the estimated remaining time. Declaration public static IEnumerable<T> WithTimedProgress<T>(this ICollection<T> source, bool constantUpdate = false) Parameters Type Name Description ICollection <T> source The source enumerable. Boolean constantUpdate If true, prints a new progress line every time a new element is processed. Otherwise, new progress lines are only printed when an additional \"notch\" of progress has been reached. Returns Type Description IEnumerable <T> An IEnumerable<T> containing the elements of source enumerable. Type Parameters Name Description T Type of elements of source. WithTimedProgress<T>(IEnumerable<T>, Int32, Boolean) Creates an IEnumerable<T> that enumerates through elements of a sequence and prints a progress bar to the Console , showing the elapsed time and the estimated remaining time. Declaration public static IEnumerable<T> WithTimedProgress<T>(this IEnumerable<T> source, int count, bool constantUpdate = false) Parameters Type Name Description IEnumerable <T> source The source enumerable. Int32 count The count of elements in source . If null, the the progress bar will display the progress as unknown. Boolean constantUpdate If true, prints a new progress line every time a new element is processed. Otherwise, new progress lines are only printed when an additional \"notch\" of progress has been reached. Returns Type Description IEnumerable <T> An IEnumerable<T> containing the elements of source enumerable. Type Parameters Name Description T Type of elements of source."
  },
  "api/DoubleSharp.Random.html": {
    "href": "api/DoubleSharp.Random.html",
    "title": "Namespace DoubleSharp.Random | DoubleSharp",
    "keywords": "Namespace DoubleSharp.Random Classes Rng Provides access to pseudo-random number generators on a thread-local basis, with a different seed value per thread."
  },
  "api/DoubleSharp.Random.Rng.html": {
    "href": "api/DoubleSharp.Random.Rng.html",
    "title": "Class Rng | DoubleSharp",
    "keywords": "Class Rng Provides access to pseudo-random number generators on a thread-local basis, with a different seed value per thread. Inheritance Object Rng Namespace : DoubleSharp.Random Assembly : DoubleSharp.dll Syntax public static class Rng : Object Remarks The numbers generated by this class are not suitable for cryptographic purposes; consider using RandomNumberGenerator if you require a cryptographically secure psuedo-random number generator. Methods Next() Returns a non-negative random integer from the thread-local random number generator. Declaration public static int Next() Returns Type Description Int32 A 32-bit signed integer that is greater than or equal to 0 and less than MaxValue . Next(Int32) Returns a non-negative random integer that is less than the specified maximum, from the thread-local random number generator. Declaration public static int Next(int maxValue) Parameters Type Name Description Int32 maxValue The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to 0. Returns Type Description Int32 A 32-bit signed integer that is greater than or equal to 0, and less than maxValue ; that is, the range of return values ordinarily includes 0 but not maxValue . However, if maxValue equals 0, maxValue is returned. Exceptions Type Condition ArgumentOutOfRangeException maxValue is less than 0. Next(Int32, Int32) Returns a random integer that is within a specified range, from the thread-local random number generator. Declaration public static int Next(int minValue, int maxValue) Parameters Type Name Description Int32 minValue The inclusive lower bound of the random number returned. Int32 maxValue The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue . Returns Type Description Int32 A 32-bit signed integer greater than or equal to minValue and less than maxValue ; that is, the range of return values includes minValue but not maxValue . If minValue equals maxValue , minValue is returned. Exceptions Type Condition ArgumentOutOfRangeException minValue is greater than maxValue . NextBytes(Byte[]) Fills the elements of a specified array of bytes with random numbers, using the thread-local random number generator. Declaration public static void NextBytes(byte[] buffer) Parameters Type Name Description Byte [] buffer The array to be filled with random numbers. Exceptions Type Condition ArgumentNullException buffer is null. NextBytes(Span<Byte>) Fills the elements of a specified span of bytes with random numbers, using the thread-local random number generator. Declaration public static void NextBytes(Span<byte> buffer) Parameters Type Name Description Span < Byte > buffer The array to be filled with random numbers. Remarks If buffer is null, this function does nothing. NextDouble() Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0, from the thread-local random number generator. Declaration public static double NextDouble() Returns Type Description Double A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0. NextInt64() Returns a non-negative random integer from the thread-local random number generator. Declaration public static long NextInt64() Returns Type Description Int64 A 64-bit signed integer that is greater than or equal to 0 and less than MaxValue . NextInt64(Int32, Int32) Returns a random integer that is within a specified range, from the thread-local random number generator. Declaration public static long NextInt64(int minValue, int maxValue) Parameters Type Name Description Int32 minValue The inclusive lower bound of the random number returned. Int32 maxValue The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue . Returns Type Description Int64 A 64-bit signed integer greater than or equal to minValue and less than maxValue ; that is, the range of return values includes minValue but not maxValue . If minValue equals maxValue , minValue is returned. Exceptions Type Condition ArgumentOutOfRangeException minValue is greater than maxValue . NextInt64(Int64) Returns a non-negative random integer that is less than the specified maximum, from the thread-local random number generator. Declaration public static long NextInt64(long maxValue) Parameters Type Name Description Int64 maxValue The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to 0. Returns Type Description Int64 A 64-bit signed integer that is greater than or equal to 0, and less than maxValue ; that is, the range of return values ordinarily includes 0 but not maxValue . However, if maxValue equals 0, maxValue is returned. Exceptions Type Condition ArgumentOutOfRangeException maxValue is less than 0. NextSingle() Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0, from the thread-local random number generator. Declaration public static double NextSingle() Returns Type Description Double A single-precision floating point number that is greater than or equal to 0.0, and less than 1.0."
  },
  "index.html": {
    "href": "index.html",
    "title": "DoubleSharp | DoubleSharp",
    "keywords": "DoubleSharp DoubleSharp is a library for .NET 7 to add helpers and extension methods for all sorts of common (and uncommon) tasks. Installation Simply reference the DoubleSharp NuGet package, then import whichever namespaces contain the extensions you wish to use."
  }
}